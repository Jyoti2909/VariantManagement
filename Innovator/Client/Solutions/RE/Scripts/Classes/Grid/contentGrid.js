/* eslint-disable */
// NOTE: contentGrid.js was autogenerated from grid component from standard product.
// List of difference to default grid:
// 1. "Chapter" datatype sorter is added to "dataTypeSorters" object
// 2. "compareChapter" method is added. Method is responsible for preparation data for default comparer
// 3. Check on "chapter_D" headId is added to "_sort" method
(function (inferno) {
  'use strict';

  var currentLocale = ''; // ISO date without  time zone in local or UTC time zone (true if local)

  var isParseISODateTimenonUTC = new Date('2016-01-01T00:00').getHours() === 0;
  var isParseISODatenonUTC = new Date('2016-01-01').getHours() === 0; // regexp for checking iso format of date.
  // e.g. 1997-07-16T19:20:30.45Z, 1997, 1997-07, 1997-07-16, 1997T19:20:30, 1997-07T19:20:30.45+00:00,
  // 1997-07-16T19:20:30Z, 1997-07-16T19:20+01:00, 1997-07-16T19:20:30+00:00 etc

  var isoRegex = /^\d{4}(-\d{2}){0,2}([T]\d{2}:\d{2}((:\d{2})|(:\d{2}\.\d{0,3}))?([Z]|([+-]\d{2}:?\d{2})?)?)?$/; // IE and EDGE added Left-to-Right marker (unicode 8206) before each punctuation characters and words .
  // https://connect.microsoft.com/IE/feedback/details/863366/ie11-javascript-date-tolocaletimestring-length-incorrect

  var isLTRMarkers = false;
  var intlSettings = {
    longDate: {
      timeZone: 'UTC',
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    },
    shortDate: {
      timeZone: 'UTC',
      year: 'numeric',
      month: 'numeric',
      day: 'numeric'
    },
    longTime: {
      timeZone: 'UTC',
      hour: 'numeric',
      minute: 'numeric',
      second: 'numeric'
    },
    shortTime: {
      timeZone: 'UTC',
      hour: 'numeric',
      minute: 'numeric'
    }
  };
  var numberMultipliers = {
    f: 'e-15',
    p: 'e-12',
    n: 'e-9',
    u: 'e-6',
    m: 'e-3',
    k: 'e3',
    K: 'e3',
    M: 'e6',
    G: 'e9',
    T: 'e12',
    P: 'e15'
  };
  intlSettings.longDateTime = Object.assign({}, intlSettings.longDate, intlSettings.longTime);
  intlSettings.shortDateTime = Object.assign({}, intlSettings.shortDate, intlSettings.longTime);
  var intlNumberFormatter;
  var defaultNumberFormatter;
  var intlDateFormatters = {};
  var dateHelper = {
    padNumber: function padNumber(number) {
      if (number < 10) {
        return '0' + number;
      }

      return number;
    }
  };
  var intl = {
    get locale() {
      return currentLocale;
    },

    set locale(locale) {
      if (currentLocale === locale) {
        return;
      }

      currentLocale = locale;
      isLTRMarkers = new Intl.DateTimeFormat(currentLocale).format(Date.now()).indexOf("\u200E") !== -1;
      Object.keys(intlSettings).forEach(function (format) {
        intlDateFormatters[format] = new Intl.DateTimeFormat(locale, intlSettings[format]);
      });
      intlNumberFormatter = new Intl.NumberFormat(locale, {
        useGrouping: false,
        maximumFractionDigits: 20
      });
      defaultNumberFormatter = new Intl.NumberFormat('en-US', {
        useGrouping: false,
        maximumFractionDigits: 20
      });
    },

    date: {
      parse: function parse(strDate) {
        if (!strDate) {
          return NaN;
        }

        strDate = strDate.trim();

        if (isoRegex.test(strDate)) {
          var result = new Date(strDate);
          var isDateTime = strDate.indexOf('T') !== -1;

          if (!isParseISODateTimenonUTC && isDateTime || !isParseISODatenonUTC && !isDateTime) {
            if (!/([Z]|([+-]\d{2}:?\d{2}))$/.test(strDate)) {
              result = new Date(result.valueOf() + result.getTimezoneOffset() * 60 * 1000);
            }
          }

          return result;
        }

        return NaN;
      },
      toIS0Format: function toIS0Format(date) {
        return date.getFullYear() + '-' + dateHelper.padNumber(date.getMonth() + 1) + '-' + dateHelper.padNumber(date.getDate()) + 'T' + dateHelper.padNumber(date.getHours()) + ':' + dateHelper.padNumber(date.getMinutes()) + ':' + dateHelper.padNumber(date.getSeconds());
      },
      format: function format(date, _format) {
        date = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
        _format = intlSettings[_format] ? _format : 'longDateTime';

        var rez = intlDateFormatters[_format].format(date);

        if (isLTRMarkers) {
          rez = rez.replace(/[\u200E\u200F]/g, '');
        }

        return rez;
      }
    },
    number: {
      parseInt: function (_parseInt) {
        function parseInt(_x) {
          return _parseInt.apply(this, arguments);
        }

        parseInt.toString = function () {
          return _parseInt.toString();
        };

        return parseInt;
      }(function (numberStr) {
        var value = parseInt(numberStr, 10);
        return Number.isInteger(value) && Number(numberStr) === value ? value : NaN;
      }),
      parseFloat: function (_parseFloat) {
        function parseFloat(_x2, _x3) {
          return _parseFloat.apply(this, arguments);
        }

        parseFloat.toString = function () {
          return _parseFloat.toString();
        };

        return parseFloat;
      }(function (numberStr, maximumIntegerDigits) {
        numberStr = typeof numberStr === 'string' ? numberStr.replace(',', '.') : numberStr;
        var abbreviation = numberStr.length && numberStr[numberStr.length - 1];
        var multiplier = abbreviation && numberMultipliers[abbreviation];

        if (multiplier) {
          numberStr = numberStr.slice(0, -1) + multiplier;
        }

        var number = parseFloat(numberStr);

        if (isFinite(number) && Number(numberStr) === number) {
          if (maximumIntegerDigits > 0 && this.toString(Math.abs(parseInt(numberStr))).length > maximumIntegerDigits) {
            return NaN;
          }

          return number;
        }

        return NaN;
      }),
      toString: function toString(number) {
        return defaultNumberFormatter.format(number);
      },
      format: function format(number, options) {
        if (options) {
          return number.toLocaleString(intl.locale, Object.assign({
            useGrouping: false
          }, options));
        }

        return intlNumberFormatter.format(number);
      }
    }
  }; // set defaul locale

  intl.locale = 'en-US';

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      keys.push.apply(keys, Object.getOwnPropertySymbols(object));
    }

    if (enumerableOnly) keys = keys.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      if (i % 2) {
        var source = arguments[i] != null ? arguments[i] : {};
        ownKeys(source, true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));
      } else {
        ownKeys(source).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(arguments[i], key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }

    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _templateObject() {
    var data = _taggedTemplateLiteral(["<img class=\"", "\" alt=\"", "\" />"]);

    _templateObject = function _templateObject() {
      return data;
    };

    return data;
  }

  var SvgManager = {
    loadedUrls: new Set(),
    vaultImages: new Map(),
    _salt: 'svg-',
    _vaultRegExp: /vault:\/\/\/\?fileid=/i,
    _vaultPromises: new Map(),
    init: function init() {
      if (this.dom) {
        return;
      }

      var svgNS = 'http://www.w3.org/2000/svg';
      var symbolContainer = document.createElementNS(svgNS, 'svg');
      symbolContainer.setAttribute('id', 'svg-symbols');
      symbolContainer.setAttribute('style', 'display:none');
      var defNode = document.createElementNS(svgNS, 'def');
      var filterNode = document.createElementNS(svgNS, 'filter');
      var feColorMatrixNode = document.createElementNS(svgNS, 'feColorMatrix');
      filterNode.setAttribute('id', 'GrayFilter');
      feColorMatrixNode.setAttribute('type', 'saturate');
      feColorMatrixNode.setAttribute('values', '0');
      filterNode.appendChild(feColorMatrixNode);
      defNode.appendChild(filterNode);
      symbolContainer.appendChild(defNode);
      document.body.appendChild(symbolContainer);
      this.dom = symbolContainer;
    },
    createHyperHTMLNode: function createHyperHTMLNode(icon) {
      var _this = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!icon) {
        return null;
      }

      var cssClasses = options.class || '';
      var alt = options.alt || '';
      var overlayIconUrls = options.overlayIcons || [];
      var iconUrlsToDisplay = [icon].concat(_toConsumableArray(overlayIconUrls));
      var allSvgIconsLoaded = iconUrlsToDisplay.every(function (iconUrl) {
        return _this.loadedUrls.has(iconUrl);
      });

      if (allSvgIconsLoaded) {
        var baseUrl = window.location.href.replace(window.location.hash, '');
        var useNodesTemplate = iconUrlsToDisplay.map(function (iconUrl) {
          return "<use xlink:href=\"".concat(baseUrl + '#' + _this.getSymbolId(iconUrl), "\" />");
        }).join('');
        var altNode = alt ? "<title>".concat(alt, "</title>") : '';
        var svgTemplate = "\n\t\t\t\t<svg class=\"".concat(cssClasses, "\" focusable=\"false\">\n\t\t\t\t\t").concat(altNode, "\n\t\t\t\t\t").concat(useNodesTemplate, "\n\t\t\t\t</svg>");
        return HyperHTMLElement.wire(null, 'svg')([svgTemplate]);
      }

      var fileId = icon.replace(this._vaultRegExp, '');
      var imageUrl = this.vaultImages.get(fileId);

      if (!icon.toLowerCase().startsWith('vault:///?fileid=') || imageUrl) {
        iconUrlsToDisplay = [imageUrl || icon].concat(_toConsumableArray(overlayIconUrls));
        var topImage = iconUrlsToDisplay.pop();
        var backgroundImages = iconUrlsToDisplay.map(function (image) {
          return "url('".concat(image, "')");
        }).join(',');
        var styleAttribute = backgroundImages ? "background-image:".concat(backgroundImages, ";background-size:cover;") : '';
        var imgTemplate = "\n\t\t\t\t<img\n\t\t\t\t\tclass=\"".concat(cssClasses, "\"\n\t\t\t\t\tsrc=\"").concat(topImage, "\"\n\t\t\t\t\talt=\"").concat(alt, "\"\n\t\t\t\t\tstyle=\"").concat(styleAttribute, "\"\n\t\t\t\t/>\n\t\t\t");
        return HyperHTMLElement.wire()([imgTemplate]);
      }

      var imageNode = HyperHTMLElement.wire()(_templateObject(), cssClasses, alt);

      if (!this._vaultPromises.has(fileId)) {
        this.load([icon]);
      }

      this._vaultPromises.get(fileId).then(function (iconSrc) {
        iconUrlsToDisplay = [iconSrc].concat(_toConsumableArray(overlayIconUrls));
        imageNode.src = iconUrlsToDisplay.pop();
        var backgroundImages = iconUrlsToDisplay.map(function (image) {
          return "url('".concat(image, "')");
        }).join(',');

        if (backgroundImages) {
          imageNode.style.backgroundImage = backgroundImages;
          imageNode.style.backgroundSize = 'cover';
        }
      });

      return imageNode;
    },
    createInfernoVNode: function createInfernoVNode(icon) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!icon) {
        return null;
      }

      var cssClasses = options.class || null;
      var alt = options.alt || null;
      var symbolId = this.getSymbolId(icon);

      if (symbolId) {
        var baseUrl = window.location.href.replace(window.location.hash, '');
        return inferno.createVNode(32, "svg", cssClasses, [alt ? inferno.createVNode(1, "title", null, alt, 0) : null, inferno.createVNode(32, "use", null, null, 1, {
          "xlink:href": baseUrl + '#' + symbolId
        })], 0, {
          "focusable": "false"
        });
      }

      var setAsBackground = options.setAsBackground;
      var imageUrl = icon;
      var fileId = icon.replace(this._vaultRegExp, '');
      imageUrl = this.vaultImages.get(fileId);

      if (!icon.toLowerCase().startsWith('vault:///?fileid=') || imageUrl) {
        return inferno.createVNode(1, "img", cssClasses, null, 1, {
          "src": imageUrl || icon,
          "alt": alt
        });
      }

      var ref = null;
      var refPromise = new Promise(function (resolve) {
        ref = function ref(dom) {
          if (dom) {
            resolve(dom);
          }
        };
      });

      if (!this._vaultPromises.has(fileId)) {
        this.load([icon]);
      }

      Promise.all([this._vaultPromises.get(fileId), refPromise]).then(function (data) {
        var iconSrc = data[0];
        var imageNode = data[1];

        if (setAsBackground) {
          imageNode.style.backgroundImage = 'url(' + iconSrc + ')';
        } else {
          imageNode.src = iconSrc;
        }
      });
      return inferno.createVNode(1, "img", cssClasses, null, 1, {
        "src": "../images/DefaultItemType.svg",
        "alt": alt
      }, null, ref);
    },
    getSymbolId: function getSymbolId(url) {
      var id = this._urlToId(url);

      return this.loadedUrls.has(url) ? this._salt + id : null;
    },
    load: function load(symbolUrlsArr) {
      var self = this;
      var requiredUrls = symbolUrlsArr.filter(function (url) {
        return url.match(/\.\.\/images\/(?!.+\/).+\.svg/i) && !self.loadedUrls.has(url);
      });
      var vaultUrls = new Set();
      symbolUrlsArr.filter(function (url) {
        var fileId = url.replace(self._vaultRegExp, '');
        return url.match(self._vaultRegExp) && !self.vaultImages.has(fileId);
      }).forEach(function (url) {
        vaultUrls.add(url);
      });

      if (!requiredUrls.length && !vaultUrls.size) {
        return Promise.resolve();
      }

      this.init();
      requiredUrls.forEach(function (url) {
        self.loadedUrls.add(url);
      });
      var requiredPromise = new Promise(function (resolve, reject) {
        var query = requiredUrls.map(function (url) {
          return encodeURI(self._urlToId(url));
        }).join(',');
        var request = new XMLHttpRequest();

        request.onload = function () {
          if (request.responseText) {
            var parser = new DOMParser();
            var tempDocument = parser.parseFromString(request.responseText, 'text/html');
            var tempFragment = document.createDocumentFragment();
            var symbols = tempDocument.firstChild.childNodes;

            for (var i = 0; i < symbols.length; i++) {
              tempFragment.appendChild(symbols[i].cloneNode(true));
            }

            self.dom.appendChild(tempFragment);
          }

          resolve();
        };

        request.onerror = function () {
          reject(new Error("(".concat(request.status, ") ").concat(request.statusText)));
        };

        request.open('GET', aras.getBaseURL() + '/javascript/include.aspx?svg=' + query, true);
        request.send();
      });

      if (!vaultUrls.size) {
        return requiredPromise;
      }

      var headers = aras.OAuthClient.getAuthorizationHeader();
      vaultUrls.forEach(function (url) {
        var fileId = url.replace(self._vaultRegExp, '');

        try {
          url = aras.IomInnovator.getFileUrl(fileId, aras.Enums.UrlType.None);
        } catch (error) {
          if (error.message.startsWith('Error getting files:')) {
            return;
          } else {
            throw error;
          }
        }

        var promise = fetch(url, {
          headers: headers
        }).then(function (response) {
          return response.blob().then(function (blob) {
            return new Promise(function (resolve, reject) {
              var reader = new FileReader();

              reader.onloadend = function () {
                return resolve(reader.result);
              };

              reader.onerror = reject;
              reader.readAsDataURL(blob);
            }).then(function (dataUrl) {
              self.vaultImages.set(fileId, dataUrl);

              self._vaultPromises.delete(fileId);

              return dataUrl;
            });
          });
        });

        self._vaultPromises.set(fileId, promise);
      });
      var vaultPromise = Promise.all(this._vaultPromises);
      return Promise.all([requiredPromise, vaultPromise]);
    },
    _urlToId: function _urlToId(url) {
      return url.substring(url.lastIndexOf('/') + 1, url.lastIndexOf('.')).toLowerCase();
    }
  };

  var gridFormatters = {
    boolean: function boolean(headId, rowId, value, grid) {
      var applyEdit = function applyEdit(e) {
        var rootRowId = grid.settings.focusedCell.rowId;
        var isDisabled = !grid.view.defaultSettings.editable || !grid.checkEditAvailability(headId, rootRowId, grid);
        var target = e.target;
        var newValue = target.checked;

        if (!isDisabled) {
          var propName = grid.head.get(headId, 'name') || headId;
          grid.dom.dispatchEvent(new CustomEvent('applyEdit', {
            detail: {
              headId: headId,
              rowId: rootRowId,
              value: newValue,
              dataId: rowId,
              propName: propName
            }
          }));
        } else {
          e.preventDefault();
        }
      };

      return {
        className: 'aras-grid-row-cell__boolean',
        children: [{
          tag: 'label',
          className: 'aras-checkbox',
          children: [{
            tag: 'input',
            className: 'aras-checkbox__input',
            attrs: {
              type: 'checkbox',
              checked: value,
              onClick: applyEdit
            }
          }, {
            tag: 'span',
            className: 'aras-checkbox__check-button',
            style: 'margin-right:0;'
          }]
        }]
      };
    },
    img: function img(headId, rowId, value) {
      var svgVNode = SvgManager.createInfernoVNode(value);

      if (svgVNode) {
        var rowClassName = 'aras-grid-row-cell__img';
        return {
          className: rowClassName,
          children: [svgVNode]
        };
      }

      return {
        children: []
      };
    },
    link: function link(headId, rowId, value, grid) {
      return {
        children: [{
          tag: 'span',
          className: 'aras-grid-link',
          children: [value]
        }]
      };
    },
    calendar: function calendar(headId, rowId, value, grid, metadata) {
      var date = intl.date.parse(value);
      var formattedDate = date ? intl.date.format(date, metadata ? metadata.format : undefined) : '';
      return {
        className: 'aras-grid-row-cell__calendar',
        children: [{
          tag: 'span',
          children: [formattedDate]
        }]
      };
    },
    select: function select(headId, rowId, value, grid, metadata) {
      var options = metadata.options || metadata.list || [];
      var result = options.find(function (option) {
        return option.value.toString() === value;
      });
      var label = result ? result.label || result.value : value;
      return {
        className: 'aras-grid-row-cell__select',
        children: [{
          tag: 'span',
          children: [label]
        }]
      };
    }
  };

  gridFormatters.extend = function (formatters) {
    Object.assign(this, formatters);
  };

  var RESTRICTED_RESOURCE;

  var fileLink = function fileLink(headId, rowId, value, grid, metadata) {
    var svgLink = '../../../../images/Upload.svg';
    var svgNode = ArasModules.SvgManager.createInfernoVNode(svgLink, {
      class: 'aras-grid-file-icon aras-grid-file-icon_select-file'
    });
    var linkTemplate = gridFormatters.link(headId, rowId, aras.getResource('', 'image_browser.select_file'), grid);
    return {
      attrs: {
        onClick: metadata.loadFileHandler
      },
      children: [svgNode].concat(_toConsumableArray(linkTemplate.children))
    };
  };

  var dataTypeFormatters = {
    decimal: function decimal(headId, rowId, value, grid, metadata) {
      return {
        children: [value || value === 0 ? intl.number.format(intl.number.parseFloat(value), {
          minimumFractionDigits: metadata.scale
        }) : '']
      };
    },
    float: function float(headId, rowId, value, grid) {
      return {
        children: [value || value === 0 ? intl.number.format(value) : '']
      };
    },
    file: function file(headId, rowId, value, grid, metadata) {
      if (!value && grid.view.defaultSettings.editable && grid.checkEditAvailability(headId, rowId, grid)) {
        return fileLink(headId, rowId, value, grid, metadata);
      }

      if (!value) {
        return {};
      }

      var propertyName = grid.head.get(headId, 'name') || headId;
      var fileName = grid.rows.get(rowId, "".concat(propertyName, "@aras.keyed_name")) || value;

      if (grid.rows.get(rowId, "".concat(propertyName, "@aras.discover_only")) === '1') {
        return {
          children: [fileName]
        };
      }

      var isTemp = grid.rows.get(rowId, "".concat(propertyName, "@aras.action")) === 'add';
      var svgLink = "../images/".concat(isTemp ? 'FilePropertyUnsaved.svg' : 'FileProperty.svg');
      var svgNode = ArasModules.SvgManager.createInfernoVNode(svgLink);
      svgNode.className = 'aras-grid-file-icon';
      var linkTemplate = isTemp ? {
        children: [inferno.createVNode(1, "span", null, fileName, 0)]
      } : gridFormatters.link(headId, rowId, fileName, grid);
      linkTemplate.children.unshift(svgNode);
      return linkTemplate;
    },
    mv_list: function mv_list(headId, rowId, value, grid, metadata) {
      var resultString = value.split(',').map(function (value) {
        var foundElement = metadata.list.find(function (listElement) {
          return listElement.value === value;
        });
        return foundElement ? foundElement.label : value;
      }).join(', ');
      return {
        children: [resultString]
      };
    },
    color: function color(headId, rowId, value, grid) {
      return {
        style: {
          'background-color': value
        },
        children: null
      };
    },
    'color list': function colorList(headId, rowId, value, grid, metadata) {
      var list = gridFormatters.select(headId, rowId, value, grid, metadata);
      var color = gridFormatters.color(headId, rowId, value, grid);
      return _objectSpread2({}, color, {}, list);
    },
    date: function date(headId, rowId, value, grid, metadata) {
      return {
        children: [aras.convertFromNeutral(value, 'date', aras.getDateFormatByPattern(grid.head.get(headId, 'pattern') || 'short_date'))]
      };
    },
    item: function item(headId, rowId, value, grid) {
      if (!value) {
        return {};
      }

      var propertyName = grid.head.get(headId, 'name') || headId;
      var itemName = grid.rows.get(rowId, "".concat(propertyName, "@aras.keyed_name")) || value;

      if (grid.rows.get(rowId, "".concat(propertyName, "@aras.discover_only")) === '1' || grid.view.defaultSettings.editable && window.isEditMode) {
        return {
          children: [itemName]
        };
      }

      return gridFormatters.link(headId, rowId, itemName, grid);
    },
    image: function image(headId, rowId, value, grid) {
      var regExp = /\ssrc=(?:(?:'([^']*)')|(?:"([^"]*)")|([^\s]*))/i; // match src='a' OR src="a" OR src=a

      value = grid.rows.get(rowId, "".concat(headId, "@aras.keyed_name")) || value;
      var srcMatches = value.match(regExp);
      value = srcMatches ? srcMatches[1] || srcMatches[2] || srcMatches[3] || '' : value;
      return gridFormatters.img(headId, rowId, value, grid);
    },
    restricted: function restricted(headId, rowId, value, grid) {
      if (!RESTRICTED_RESOURCE) {
        RESTRICTED_RESOURCE = aras.getResource('', 'common.restricted_property_warning');
      }

      return {
        children: [RESTRICTED_RESOURCE],
        style: {
          color: '#ff0000'
        }
      };
    },
    md5: function md5(headId, rowId, value, grid) {
      return {
        children: ['***']
      };
    },
    'claim by': function claimBy(headId, rowId, value, grid, metadata) {
      var rowInfo = grid.rows._store.get(rowId) || {};
      var isDiscoverOnly = rowInfo['@aras.discover_only'] === '1';
      var isTemp = rowInfo['@aras.isTemp'] === '1';
      var isDirty = rowInfo['@aras.isDirty'] === '1';
      var isEditState = rowInfo['@aras.isEditState'] === '1';
      var lockedById = value && _typeof(value) === 'object' ? value.id : value;
      var icon = '';

      if (!grid.rows.has(rowId)) {
        icon = '../../../../images/NullRelated.svg';
      } else if (isDiscoverOnly) {
        icon = '../../../../images/Blocked.svg';
      } else if (isTemp) {
        icon = '../../../../images/New.svg';
      } else if (lockedById) {
        icon = lockedById === metadata.currentUserId ? "../../../../images/".concat(isDirty || isEditState ? 'Edit' : 'ClaimOn', ".svg") : '../../../../images/ClaimOther.svg';
      }

      return gridFormatters.img(headId, rowId, icon, grid);
    },
    list: gridFormatters.select,
    'filter list': gridFormatters.select
  };

  var utils = {};

  utils.mixin = function () {
    var target = arguments.length <= 0 ? undefined : arguments[0];
    var _len = arguments.length;
    var sources = Array(_len > 1 ? _len - 1 : 0);

    for (var _key = 1; _key < _len; _key++) {
      sources[_key - 1] = _key < 0 || arguments.length <= _key ? undefined : arguments[_key];
    }

    sources.forEach(function (source) {
      var descriptors = Object.keys(source).reduce(function (descriptors, key) {
        descriptors[key] = Object.getOwnPropertyDescriptor(source, key);
        return descriptors;
      }, {}); // by default, Object.assign copies enumerable Symbols too

      Object.getOwnPropertyNames(source).forEach(function (sym) {
        var descriptor = Object.getOwnPropertyDescriptor(source, sym);

        if (descriptor.enumerable) {
          descriptors[sym] = descriptor;
        }
      });
      Object.defineProperties(target, descriptors);
    });
    return target;
  };

  utils.infernoFlags = {
    unknownChildren: 0,
    hasInvalidChildren: 1,
    hasVNodeChildren: 2,
    hasNonKeyedChildren: 4,
    hasKeyedChildren: 8,
    multipleChildren: 12,
    hasTextChildren: 16,
    componentFunction: 8
  };

  utils.templateToVNode = function (template) {
    if (template === null) {
      return template;
    }

    if (_typeof(template) !== 'object' || !template.tag) {
      if (template.flags && template.type) {
        return template;
      }

      return Inferno.createTextVNode(template);
    }

    var children;

    if (template.children) {
      children = template.children.map(function (child) {
        return utils.templateToVNode(child);
      });
    }

    var props = {
      style: template.style
    };
    Object.assign(props, template.attrs || {}, template.events || {});
    var childFlag;

    if (!children || !Array.isArray(children) && _typeof(children) !== 'object') {
      childFlag = this.infernoFlags.hasInvalidChildren;
    } else if (!Array.isArray(children)) {
      childFlag = this.infernoFlags.hasVNodeChildren;
    } else if (children.every(function (child) {
      return !!child.key;
    })) {
      childFlag = this.infernoFlags.hasKeyedChildren;
    } else {
      childFlag = this.infernoFlags.hasNonKeyedChildren;
    }

    return Inferno.createVNode(Inferno.getFlagsForElementVnode(template.tag), template.tag, template.className, children, childFlag, props, template.key, template.ref);
  };

  utils.hashFromString = function (string) {
    var hash = 0;

    if (string.length === 0) {
      return hash;
    }

    for (var i = 0; i < string.length; i++) {
      var char = string.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash |= 0; // Convert to 32bit integer
    }

    return hash;
  };

  utils.extendHTMLElement = function () {
    for (var _len2 = arguments.length, arg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      arg[_key2] = arguments[_key2];
    }

    return (typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === 'object' ? Reflect.construct(HTMLElement, arg, this.constructor) : HTMLElement.apply(this, arg) || this;
  };

  var xStackPool = [];
  var yStackPool = [];

  utils.areEqual = function (x, y) {
    var xStack = xStackPool.length ? xStackPool.pop() : [];
    var yStack = yStackPool.length ? yStackPool.pop() : [];
    var result = equal(x, y, xStack, yStack);
    xStack.length = 0;
    yStack.length = 0;
    xStackPool.push(xStack);
    yStackPool.push(yStack);
    return result;
  };

  function equal(x, y, xStack, yStack) {
    if (x === y) {
      return x !== 0 || 1 / x == 1 / y;
    }

    if (x == null || y == null) {
      return false;
    }

    if (_typeof(x) != 'object' || _typeof(y) != 'object') {
      return false;
    }

    var objToString = Object.prototype.toString.call(x);

    if (objToString != Object.prototype.toString.call(y)) {
      return false;
    }

    if (objToString === '[object Date]') {
      return +x == +y;
    }

    var stackLength = xStack.length;

    while (stackLength--) {
      if (xStack[stackLength] == x) {
        return yStack[stackLength] == y;
      }
    }

    xStack.push(x);
    yStack.push(y);

    if (objToString === '[object Array]') {
      var arrayLength = x.length;

      if (arrayLength !== y.length) {
        return false;
      }

      while (arrayLength--) {
        if (!equal(x[arrayLength], y[arrayLength], xStack, yStack)) {
          return false;
        }
      }
    } else {
      if (x.constructor !== y.constructor) {
        return false;
      }

      var _hasOwnProperty = Object.prototype.hasOwnProperty;

      if (_hasOwnProperty.call(x, 'valueOf') && _hasOwnProperty.call(y, 'valueOf')) {
        return x.valueOf() == y.valueOf();
      }

      var keys = Object.keys(x);
      var keysLength = keys.length;

      if (keysLength != Object.keys(y).length) {
        return false;
      }

      for (var i = 0; i < keysLength; i++) {
        if (!equal(x[keys[i]], y[keys[i]], xStack, yStack)) {
          return false;
        }
      }
    }

    xStack.pop();
    yStack.pop();
    return true;
  }

  function HeadWrap(Map, grid) {
    this._store = Map;
    this._grid = grid;
    this._array = 'indexHead';
  }

  HeadWrap.prototype = {
    constructor: HeadWrap,
    get: function get(key, prop) {
      var v = this._store.get(key);

      if (v) {
        if (prop) {
          return v[prop];
        }

        return utils.mixin({}, v);
      }
    },
    set: function set(key, value, prop) {
      if (!this._store.has(key)) {
        this._grid.settings[this._array].push(key);

        this._store.set(key, value);
      } else if (prop !== undefined) {
        var head = this._store.get(key);

        head[prop] = value;
      } else {
        this._store.set(key, value);
      }

      this._grid.render();
    },
    has: function has(key) {
      return this._store.has(key);
    },
    delete: function _delete(key) {
      var array = this._grid.settings[this._array];
      var index = array.indexOf(key);

      if (index > -1) {
        array.splice(index, 1);

        this._grid.render();
      }

      var selectIndex = this._grid.settings.selectedRows.indexOf(key);

      if (selectIndex > -1) {
        this._grid.settings.selectedRows.splice(selectIndex, 1);

        this._grid.render();
      }

      var focusedCell = this._grid.settings.focusedCell;

      if (focusedCell && focusedCell.editing && (focusedCell.rowId === key || focusedCell.headId === key)) {
        this._grid.cancelEdit();
      }

      this._store.delete(key);
    }
  };

  function RowsWrap(Map, grid) {
    this._store = Map;
    this._grid = grid;
    this._array = 'indexRows';
  }

  RowsWrap.prototype = Object.assign(Object.create(HeadWrap.prototype), {
    constructor: RowsWrap
  });

  var GridActions =
  /*#__PURE__*/
  function () {
    function GridActions(grid) {
      _classCallCheck(this, GridActions);

      this.handlers = [];
      this.grid = grid;

      this._addHandlers([{
        target: this.grid.dom,
        action: 'resizeHead',
        handler: this._resizeHandler.bind(this)
      }, {
        target: this.grid.dom,
        action: 'selectRow',
        handler: this._selectHandler.bind(this)
      }, {
        target: this.grid.dom,
        action: 'focusCell',
        handler: this._focusHandler.bind(this)
      }, {
        target: this.grid.dom,
        action: 'applyEdit',
        handler: this._applyEditHandler.bind(this)
      }, {
        target: this.grid.dom,
        action: 'notValidEdit',
        handler: this._notValidEditHandler.bind(this)
      }, {
        target: this.grid.dom,
        action: 'cancelEdit',
        handler: this._cancelEditHandler.bind(this)
      }, {
        target: this.grid.dom,
        action: 'moveHead',
        handler: this._moveHeadHandler.bind(this)
      }, {
        target: this.grid.dom,
        action: 'sort',
        handler: this._sortHandler.bind(this)
      }, {
        target: this.grid.dom,
        action: 'freezeColumns',
        handler: this._freezeColumnsHandler.bind(this)
      }]);
    }

    _createClass(GridActions, [{
      key: "_addHandlers",
      value: function _addHandlers(handlers) {
        handlers.forEach(function (item) {
          this.handlers.push(item);
          item.target.addEventListener(item.action, item.handler);
        }, this);
      }
    }, {
      key: "_resizeHandler",
      value: function _resizeHandler(e) {
        var headId = this.grid.settings.indexHead[e.detail.index];
        var head = this.grid.head.get(headId);

        if (head) {
          head.width = Math.max(head.width + e.detail.delta, this.grid.view.defaultSettings.headWidth);
          this.grid.head.set(headId, head);
        }
      }
    }, {
      key: "_focusHandler",
      value: function _focusHandler(e) {
        var grid = this.grid;
        var prev = grid.settings.focusedCell;

        if (!e.detail) {
          grid.settings.focusedCell = null;
          grid.view.showMessageActiveCell();
          return;
        }

        var indexRow = e.detail.indexRow;
        var indexHead = e.detail.indexHead;
        var rowId = 'searchRow';
        var headId = grid.settings.indexHead[indexHead];
        var editing = false;

        if (indexRow !== 'searchRow') {
          rowId = grid.settings.indexRows[indexRow];
          editing = e.detail.forceEdit || !!prev && !prev.editing && prev.rowId === rowId && prev.headId === headId;
        }

        grid.settings.focusedCell = {
          headId: headId,
          rowId: rowId,
          editing: editing
        };
      }
    }, {
      key: "_applyEditHandler",
      value: function _applyEditHandler(e) {
        var grid = this.grid;
        var rowId = e.detail.dataId;
        var value = e.detail.value;
        var propName = e.detail.propName;
        grid.rows.set(rowId, value, propName);
      }
    }, {
      key: "_notValidEditHandler",
      value: function _notValidEditHandler(e) {
        var gridSettings = this.grid.settings;

        if (!gridSettings.focusedCell) {
          return;
        }

        gridSettings.focusedCell = Object.assign(gridSettings.focusedCell, {
          valid: false,
          toolTipMessage: e.detail.message
        });
      }
    }, {
      key: "_cancelEditHandler",
      value: function _cancelEditHandler() {
        var grid = this.grid;
        grid.cancelEdit();
      }
    }, {
      key: "_selectHandler",
      value: function _selectHandler(e) {
        var rowIndex = e.detail.index;
        var rowId = this.grid.settings.indexRows[rowIndex];

        switch (e.detail.type) {
          case 'all':
            {
              this.grid.settings.selectedRows = this.grid.settings.indexRows.slice();
              break;
            }

          case 'single':
            {
              this.grid.settings.selectedRows = [rowId];
              break;
            }

          case 'ctrl':
            {
              var indexInSelected = this.grid.settings.selectedRows.indexOf(rowId);

              if (indexInSelected > -1) {
                this.grid.settings.selectedRows.splice(indexInSelected, 1);
              } else {
                this.grid.settings.selectedRows.unshift(rowId);
              }

              break;
            }

          case 'shift':
            {
              var lastSelectedRow = this.grid.settings.selectedRows[0] || this.grid.settings.indexRows[0];
              var indexOfLastSelectedRow = this.grid.settings.indexRows.indexOf(lastSelectedRow);
              this.grid.settings.selectedRows = [lastSelectedRow];
              var direction = indexOfLastSelectedRow > rowIndex ? -1 : 1;

              while (indexOfLastSelectedRow !== rowIndex) {
                indexOfLastSelectedRow += direction;
                this.grid.settings.selectedRows.push(this.grid.settings.indexRows[indexOfLastSelectedRow]);
              }
            }
        }

        this.grid.render();
      }
    }, {
      key: "_moveHeadHandler",
      value: function _moveHeadHandler(e) {
        var grid = this.grid;
        var startIndex = e.detail.startIndex;
        var startHeadId = grid.settings.indexHead[startIndex];
        var endIndex = e.detail.endIndex;
        grid.settings.indexHead.splice(startIndex, 1);
        grid.settings.indexHead.splice(endIndex, 0, startHeadId);
        grid.render();
      }
    }, {
      key: "_sortHandler",
      value: function _sortHandler(e) {
        var grid = this.grid;
        var index = e.detail.index;
        var ctrlKey = e.detail.ctrlKey;
        var headId = grid.settings.indexHead[index];
        var orderBy = grid.settings.orderBy;
        var el;

        for (var i = 0; i < orderBy.length; i++) {
          if (orderBy[i].headId === headId) {
            el = orderBy[i];
            break;
          }
        }

        if (!ctrlKey) {
          grid.settings.orderBy = [{
            headId: headId,
            desc: el ? !el.desc : false
          }];
          return;
        }

        if (el) {
          el.desc = !el.desc;
          grid.settings.orderBy = orderBy;
          return;
        }

        grid.settings.orderBy = orderBy.concat([{
          headId: headId,
          desc: false
        }]);
      }
    }, {
      key: "_freezeColumnsHandler",
      value: function _freezeColumnsHandler(e) {
        var frozenColumns = e.detail.frozenColumns;
        this.grid.settings.frozenColumns = frozenColumns;
        this.grid.render();
      }
    }]);

    return GridActions;
  }();

  var GridSearch = {
    text: function text(head, headId, value, grid, metadata) {
      return {
        children: [{
          tag: 'input',
          className: 'aras-form-input',
          events: {
            oninput: function oninput(e) {
              var index = e.target.closest('.aras-grid-search-row-cell').dataset.index;
              var headId = grid.settings.indexHead[index];
              grid.head.set(headId, e.target.value, 'searchValue');
              grid.dom.dispatchEvent(new CustomEvent('filter'));
            },
            onfocus: function onfocus() {
              grid.settings.focusedCell = {
                headId: headId,
                rowId: 'searchRow'
              };
            },
            onkeydown: function onkeydown(e) {
              if (e.key === 'F2' && metadata && metadata.handler) {
                metadata.handler();
              }
            }
          },
          attrs: {
            type: 'text'
          },
          ref: function ref(dom) {
            if (!dom || dom.value === value) {
              return;
            }

            dom.value = value;
          }
        }]
      };
    },
    disabled: function disabled(head, headId, value, grid, metadata) {
      return {
        children: [{
          tag: 'input',
          className: 'aras-form-input',
          attrs: {
            type: 'text',
            disabled: true,
            value: value
          }
        }]
      };
    },
    dropDownIcon: function dropDownIcon(head, headId, value, grid) {
      var icon = '';
      var currentValue = head.searchValue;
      var roots = [];
      var data = new Map();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = head.options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;

          if (!icon && item.value === currentValue) {
            icon = item.icon;
          }

          roots.push(item.label);
          data.set(item.label, item);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var className = "aras-grid-dropdown-icon__button ".concat(currentValue ? '' : 'aras-icon-arrow aras-icon-arrow_down');
      var buttonIconElement = ArasModules.SvgManager.createInfernoVNode(icon);
      return {
        children: [inferno.createVNode(1, "aras-dropdown", "aras-grid-dropdown-icon", [inferno.createVNode(1, "span", className, buttonIconElement, 0, {
          "tabindex": "0",
          "dropdown-button": "",
          "role": "button",
          "aria-label": aras.getResource('', 'itemsgrid.claimed_by_dropdown_button'),
          "aria-haspopup": "menu"
        }), inferno.createVNode(1, "aras-menu", "aras-dropdown", null, 1, null, null, function (node) {
          if (node && !node.state.roots.length) {
            node.on('click', function (id) {
              var searchValue = node.state.data.get(id).value;
              grid.head.set(headId, searchValue, 'searchValue');
            });
            node.applyData(data, roots);
          }
        })], 4, {
          "closeonclick": ""
        })]
      };
    },
    date: function date(head, headId, value, grid, metadata) {
      var pattern = aras.getDotNetDatePattern('short_date');

      if (head.searchValue === null) {
        value = head.invalidValue;
      } else if (head.invalidValue && head.invalidValue !== '') {
        var invalidValueDate = aras.convertToNeutral(head.invalidValue, 'date', pattern);

        if (head.searchValue === invalidValueDate) {
          value = head.invalidValue;
        } else {
          value = aras.convertFromNeutral(value, 'date', pattern);
        }

        head.invalidValue = '';
      } else {
        value = aras.convertFromNeutral(value, 'date', pattern);
        head.invalidValue = '';
      }

      var invalid = head.invalidValue ? ' aras-form-input_invalid' : '';
      return {
        className: 'aras-form',
        children: [{
          tag: 'div',
          className: 'aras-form-date' + invalid,
          children: [{
            tag: 'input',
            className: 'aras-form-calendar',
            attrs: {
              type: 'text'
            },
            ref: function ref(dom) {
              if (!dom || dom.value === value) {
                return;
              }

              dom.value = value;
            },
            events: {
              onfocus: function onfocus() {
                grid.settings.focusedCell = {
                  headId: headId,
                  rowId: 'searchRow'
                };
              },
              onkeydown: function onkeydown(e) {
                if (e.key === 'F2') {
                  metadata.handler();
                }
              },
              oninput: function oninput(e) {
                var index = e.target.closest('.aras-grid-search-row-cell').dataset.index;
                var headId = grid.settings.indexHead[index];
                var value = aras.convertToNeutral(e.target.value, 'date', pattern);
                var invalidValue = '';
                var label = aras.convertFromNeutral(value, 'date', pattern);

                if (value === e.target.value) {
                  value = null;
                  invalidValue = e.target.value;
                } else if (label !== e.target.value) {
                  invalidValue = e.target.value;
                }

                var head = grid.head.get(headId);
                grid.head.set(headId, Object.assign(head, {
                  searchValue: value,
                  invalidValue: invalidValue
                }));
              }
            }
          }, {
            tag: 'span',
            className: 'aras-filter-list-icon aras-icon-error'
          }, {
            tag: 'span',
            events: {
              onmousedown: function onmousedown(e) {
                metadata.handler();
                e.stopPropagation();
              }
            }
          }]
        }]
      };
    },
    singular: function singular(head, headId, value, grid, metadata) {
      if (!head.componentData) {
        head.componentData = {
          ref: function ref(dom) {
            if (!dom) {
              delete head.componentData;
              return;
            }

            dom.setState({
              itemType: metadata.itemType,
              value: head.searchValue
            });

            var originKeydown = dom._onKeyDownHandler.bind(dom);

            dom._onKeyDownHandler = function (e) {
              if (e.key === 'F2') {
                metadata.handler();
              }

              originKeydown(e);
            };
          }
        };
      }

      return {
        children: [{
          tag: 'aras-item-property',
          ref: head.componentData.ref,
          events: {
            onchange: function onchange() {
              head.searchValue = this.state.value;
            },
            onclick: function onclick(e) {
              if (e.target.closest('.aras-filter-list__button')) {
                metadata.handler();
                e.stopPropagation();
              }
            }
          },
          attrs: {
            value: head.searchValue
          }
        }]
      };
    },
    filterList: function filterList(head, headId, value, grid, metadata) {
      if (!head.componentData) {
        head.componentData = {
          ref: function ref(dom) {
            if (!dom) {
              delete head.componentData;
              return;
            }

            var attrs = {
              list: [{
                value: '',
                label: ''
              }].concat(_toConsumableArray(metadata.list)),
              value: head.searchValue
            };

            if (head.searchValue === '') {
              attrs.label = '';
            } else if (head.searchValue === null) {
              attrs.label = head.inputLabel || '';
            }

            dom.setState(attrs);
          }
        };
      }

      var attrs = {
        value: head.searchValue
      };

      if (head.searchValue === '') {
        attrs.label = '';
      } else if (head.searchValue === null) {
        attrs.label = head.inputLabel || '';
      }

      return {
        children: [{
          tag: 'aras-filter-list',
          ref: head.componentData.ref,
          events: {
            onchange: function onchange() {
              head.searchValue = this.state.value;
              head.inputLabel = null;
            },
            oninput: function oninput() {
              if (this.inputValidate()) {
                head.searchValue = this.state.value;
              } else {
                head.searchValue = null;
                head.inputLabel = this.state.label;
              }
            }
          },
          attrs: attrs
        }]
      };
    },
    classification: function classification(head, headId, value, grid, metadata) {
      var comp = head.componentData;

      if (!comp || comp.type !== 'classification') {
        Object.defineProperty(head, 'searchValue', {
          get: function get() {
            var comp = this.componentData;
            return comp.value || comp.label;
          },
          set: function set(newValue) {
            var comp = this.componentData;

            if (!newValue || newValue.indexOf('/') > -1) {
              comp.value = newValue;
              comp.label = null;
            } else {
              comp.value = null;
              comp.label = newValue;
            }
          },
          configurable: true
        });
        comp = {
          label: null,
          value: null,
          type: 'classification'
        };
        head.componentData = comp;
        head.searchValue = value;
      }

      if (!comp.ref) {
        comp.ref = function (dom) {
          if (!dom) {
            delete comp.ref;
            return;
          }

          dom.setState({
            list: metadata.list,
            value: comp.value,
            label: comp.label
          });
        };
      }

      return {
        children: [{
          tag: 'aras-classification-property',
          ref: comp.ref,
          events: {
            onchange: function onchange() {
              comp.value = this.state.value;
              comp.label = this.state.label;
            },
            oninput: function oninput() {
              if (this.inputValidate()) {
                comp.value = this.state.value;
                comp.label = null;
              } else {
                comp.value = null;
                comp.label = this.state.label;
              }
            },
            onkeydown: function onkeydown(e) {
              if (e.key === 'F2') {
                metadata.handler();
              }
            },
            onclick: function onclick(e) {
              if (e.target.closest('.aras-filter-list__button')) {
                metadata.handler();
              }
            }
          },
          attrs: {
            value: comp.value,
            label: comp.label
          }
        }]
      };
    },
    multiValueList: function multiValueList(head, headId, value, grid, metadata) {
      var items = (metadata.list || []).map(function (item) {
        return {
          tag: 'li',
          className: 'aras-list-item aras-list-item_shown',
          attrs: {
            'data-value': item.value
          },
          children: [{
            tag: 'label',
            className: 'aras-form-boolean',
            children: [{
              tag: 'input',
              attrs: {
                type: 'checkbox',
                checked: head.searchValue.indexOf(item.value) > -1 ? true : false
              }
            }, {
              tag: 'span'
            }, item.label]
          }]
        };
      });
      return {
        children: [{
          tag: 'aras-dropdown',
          className: 'aras-filter-list aras-dropdown-container aras-grid-multi-list',
          attrs: {
            position: 'bottom-left'
          },
          children: [{
            tag: 'span',
            className: 'aras-filter-list__input aras-form-input',
            children: [aras.getResource('', 'common.options_select', head.searchValue.length)]
          }, {
            tag: 'button',
            attrs: {
              'dropdown-button': ''
            },
            className: 'aras-filter-list__button aras-btn aras-icon-arrow aras-icon-arrow_down'
          }, {
            tag: 'div',
            className: 'aras-filter-list__dropdown aras-dropdown',
            style: '',
            children: [{
              tag: 'ul',
              className: 'aras-list',
              children: items,
              events: {
                onclick: function (event) {
                  var listNode = event.target.closest('.aras-list-item');

                  if (!listNode) {
                    return;
                  }

                  var clickValue = listNode.dataset.value;
                  var indexInCheckedList = this.head.searchValue.indexOf(clickValue);

                  if (indexInCheckedList === -1) {
                    this.head.searchValue.push(clickValue);
                  } else {
                    this.head.searchValue.splice(indexInCheckedList, 1);
                  }

                  event.preventDefault();
                  this.grid.render();
                }.bind({
                  head: head,
                  grid: grid
                })
              }
            }]
          }]
        }]
      };
    }
  };

  var NULL_RELATED_ROW_ID = '00000000000000000000000000000000';

  function gridTemplates(extension) {
    var infernoFlags = utils.infernoFlags;
    var templates = {
      gridHeadTemplate: function gridHeadTemplate(children, style) {
        return Inferno.createVNode(Inferno.getFlagsForElementVnode('table'), 'table', 'aras-grid-head', children, infernoFlags.hasNonKeyedChildren, {
          style: style
        });
      },
      gridHeadRowTemplate: function gridHeadRowTemplate(children, className) {
        var isKeyedChildren = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        return Inferno.createVNode(Inferno.getFlagsForElementVnode('tr'), 'tr', className, children, isKeyedChildren ? infernoFlags.hasKeyedChildren : infernoFlags.hasNonKeyedChildren);
      },
      gridHeadCellTemplate: function gridHeadCellTemplate(children, className, attributes) {
        return Inferno.createVNode(Inferno.getFlagsForElementVnode('th'), 'th', 'aras-grid-head-cell' + className, children, infernoFlags.hasNonKeyedChildren, attributes);
      },
      resizeTemplate: function resizeTemplate() {
        return Inferno.createVNode(Inferno.getFlagsForElementVnode('div'), 'div', 'aras-grid-head-cell-resize');
      },
      labelTemplate: function labelTemplate(children) {
        return Inferno.createVNode(Inferno.getFlagsForElementVnode('span'), 'span', 'aras-grid-head-cell-label', children, infernoFlags.hasNonKeyedChildren);
      },
      labelTextTemplate: function labelTextTemplate(children) {
        return Inferno.createVNode(Inferno.getFlagsForElementVnode('span'), 'span', 'aras-grid-head-cell-label-text', children, infernoFlags.hasVNodeChildren);
      },
      sortIconTemplate: function sortIconTemplate(className, children) {
        return Inferno.createVNode(Inferno.getFlagsForElementVnode('span'), 'span', 'aras-grid-head-cell-sort aras-icon-long-arrow ' + className, children, infernoFlags.hasVNodeChildren);
      },
      viewportTemplate: function viewportTemplate(children, style) {
        return Inferno.createVNode(Inferno.getFlagsForElementVnode('table'), 'table', 'aras-grid-viewport', children, infernoFlags.hasNonKeyedChildren, {
          style: style
        });
      },
      colgroupTemplate: function colgroupTemplate(children) {
        return Inferno.createVNode(Inferno.getFlagsForElementVnode('colgroup'), 'colgroup', null, children, infernoFlags.hasNonKeyedChildren);
      },
      colTemplate: function colTemplate(props) {
        return Inferno.createVNode(Inferno.getFlagsForElementVnode('col'), 'col', null, null, infernoFlags.hasInvalidChildren, props);
      },
      rowTemplate: function rowTemplate(children, className, index, attrs) {
        return Inferno.createVNode(Inferno.getFlagsForElementVnode('tr'), 'tr', className, children, infernoFlags.hasNonKeyedChildren, {
          'data-index': index,
          'aria-selected': attrs['aria-selected']
        });
      },
      getCellTemplate: function getCellTemplate(grid, item, headId, value, rowId) {
        var type = grid._getCellType(headId.id, item.id, value, grid, rowId);

        var cellMetadata = grid.getCellMetadata(headId.id, item.id, type);

        if (cellMetadata) {
          Object.assign(cellMetadata, {
            rowId: rowId
          });
        }

        var formatter = gridFormatters[type];
        return formatter ? formatter(headId.id, item.id, value, grid, cellMetadata) : {};
      },
      buildCell: function buildCell(props) {
        var template = Object.assign({
          tag: 'td',
          children: [props.value]
        }, props.template);
        template.className = props.className + ' ' + (template.className || '');
        return utils.templateToVNode(template);
      },
      getRowClasses: function getRowClasses(grid, row) {
        var classes = 'aras-grid-row';

        if (row.selected) {
          classes += ' aras-grid-row_selected';
        }

        if (row.hovered) {
          classes += ' aras-grid-row_hovered';
        }

        var customClasses = grid.getRowClasses(row.id);

        if (customClasses) {
          classes += ' ' + customClasses;
        }

        return classes;
      },
      buildRow: function buildRow(data) {
        var grid = data.grid;
        var cellsVN = data.head.map(function (head) {
          var itemInfo = _objectSpread2({}, data.row);

          var currentItem = itemInfo.data;
          var linkProperty = head.data.linkProperty;
          var cellClasses = ['aras-grid-row-cell'];

          if (linkProperty) {
            itemInfo.id = currentItem[linkProperty] || NULL_RELATED_ROW_ID;
            itemInfo.data = grid.rows._store.get(itemInfo.id) || {};
            cellClasses.push('aras-grid-row-cell_related');
          }

          var rawValue = itemInfo.data[head.data.name || head.id];
          var value = rawValue === undefined || rawValue === null ? '' : rawValue;
          var template = templates.getCellTemplate(grid, itemInfo, head, value, data.row.id);
          var cellStyles = grid.getCellStyles(head.id, itemInfo.id);
          template.style = templates.mergeCellStyles(template, head.data, cellStyles);

          if (typeof template.style !== 'string') {
            template.style = Object.keys(template.style || {}).reduce(function (acc, style) {
              acc += style + ': ' + template.style[style] + ';';
              return acc;
            }, '');
          }

          return templates.buildCell({
            value: value,
            template: template,
            className: cellClasses.join(' ')
          });
        });
        var attrs = {
          'aria-selected': data.row.selected ? true : null
        };
        return templates.rowTemplate(cellsVN, templates.getRowClasses(grid, data.row), data.row.index, attrs);
      },
      buildViewport: function buildViewport(rows, head, style, defaults, grid) {
        var columnsVN = head.map(function (head) {
          return templates.colTemplate({
            width: head.data.width || defaults.headWidth
          });
        });
        var rowsVN = rows.map(function (row) {
          return templates.buildRow({
            row: row,
            head: head,
            defaults: defaults,
            grid: grid
          });
        });
        var viewportChildrenVN = [templates.colgroupTemplate(columnsVN)];
        return templates.viewportTemplate(viewportChildrenVN.concat(rowsVN), style);
      },
      buildHead: function buildHead(head, headStyle, defaults, grid) {
        var searchVN = [];
        var headVN = head.map(function (head) {
          var labelChildren = [templates.labelTextTemplate(Inferno.createTextVNode(head.data.label || ''))];
          var icon = head.data.icon;
          var style = {
            width: "".concat(head.data.width || defaults.headWidth, "px")
          };
          var attributes = {
            style: style,
            'data-index': head.index
          };

          if (icon) {
            labelChildren.push(ArasModules.SvgManager.createInfernoVNode(icon));
          }

          if (defaults.sortable) {
            var classNameSort = 'aras-icon-long-arrow_' + (head.sort && head.sort.desc ? 'down' : 'up');
            labelChildren.push(templates.sortIconTemplate(classNameSort, Inferno.createTextVNode(head.sort && grid.settings.orderBy.length > 1 ? head.sort.index : '')));
            var sortAttr = 'none';

            if (head.sort) {
              sortAttr = head.sort.desc ? 'descending' : 'ascending';
            }

            attributes['aria-sort'] = sortAttr;
          }

          var children = [templates.labelTemplate(labelChildren)];

          if (defaults.resizable && head.data.resizable !== false) {
            children.unshift(templates.resizeTemplate());
          }

          if (defaults.search) {
            var search = GridSearch[head.data.searchType || 'text'];
            var cellMetadata = grid.getCellMetadata(head.id, 'searchRow', head.data.searchType || 'text');
            var template = search ? search(head.data, head.id, head.data.searchValue || '', grid, cellMetadata) : {};
            template.key = head.id;
            template.attrs = {
              'data-index': head.index
            };
            searchVN.push(templates.buildCell({
              template: template,
              className: 'aras-grid-search-row-cell'
            }));
          }

          var className = head.sort ? ' aras-grid-head-cell_selected' : '';
          return templates.gridHeadCellTemplate(children, className, attributes);
        });
        var headRowsVN = [templates.gridHeadRowTemplate(headVN)];

        if (defaults.search) {
          headRowsVN.push(templates.gridHeadRowTemplate(searchVN, null, true));
        }

        return templates.gridHeadTemplate(headRowsVN, headStyle);
      },
      mergeCellStyles: function mergeCellStyles(template, head, cellStyles) {
        if (!head.columnCssStyles && !cellStyles) {
          return template.style || {};
        }

        return Object.assign({}, head.columnCssStyles, template.style || {}, cellStyles);
      }
    };

    if (extension) {
      Object.assign(extension, Object.assign(templates, extension));
    }

    return {
      buildViewport: templates.buildViewport,
      buildHead: templates.buildHead
    };
  }

  function _templateObject6() {
    var data = _taggedTemplateLiteral(["\n\t\t\t\t<aras-dropdown class=\"aras-filter-list aras-dropdown-container aras-grid-multi-list\" position=\"bottom-left\" >\n\t\t\t\t\t", "\n\t\t\t\t\t<button dropdown-button=\"\" class=\"aras-filter-list__button aras-btn aras-icon-arrow aras-icon-arrow_down\" />\n\t\t\t\t\t<div class=\"aras-filter-list__dropdown aras-dropdown\">\n\t\t\t\t\t\t", "\n\t\t\t\t\t</div>\n\t\t\t\t</aras-dropdown>"]);

    _templateObject6 = function _templateObject6() {
      return data;
    };

    return data;
  }

  function _templateObject5() {
    var data = _taggedTemplateLiteral(["\n\t\t\t\t<ul class=\"aras-list\" onclick=", ">\n\t\t\t\t\t", "\n\t\t\t\t</ul>\n\t\t\t"]);

    _templateObject5 = function _templateObject5() {
      return data;
    };

    return data;
  }

  function _templateObject4() {
    var data = _taggedTemplateLiteral(["\n\t\t\t\t<span class=\"aras-filter-list__input aras-form-input aras-grid-row-cell__mv-list-input\">\n\t\t\t\t\t", "\n\t\t\t\t</span>\n\t\t\t"]);

    _templateObject4 = function _templateObject4() {
      return data;
    };

    return data;
  }

  function _templateObject3() {
    var data = _taggedTemplateLiteral(["\n\t\t\t\t\t<li class=\"aras-list-item aras-list-item_shown\" data-value=\"", "\">\n\t\t\t\t\t\t<label class=\"aras-checkbox\">\n\t\t\t\t\t\t\t<input type=\"checkbox\" checked=\"", "\" class=\"aras-checkbox__input\"></input>\n\t\t\t\t\t\t\t<span class=\"aras-checkbox__check-button\"></span>\n\t\t\t\t\t\t\t", "\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</li>"]);

    _templateObject3 = function _templateObject3() {
      return data;
    };

    return data;
  }

  function _templateObject2() {
    var data = _taggedTemplateLiteral(["\n\t\t<div class=\"aras-form-input__wrapper\">\n\t\t\t", "\n\t\t\t<span class=\"aras-filter-list-icon aras-icon-error\" />\n\t\t</div>\n\t"]);

    _templateObject2 = function _templateObject2() {
      return data;
    };

    return data;
  }

  function _templateObject$1() {
    var data = _taggedTemplateLiteral(["<input class=\"aras-form-input\" type=\"text\" value=\"", "\">"]);

    _templateObject$1 = function _templateObject() {
      return data;
    };

    return data;
  }

  var ComponentValidationError =
  /*#__PURE__*/
  function (_Error) {
    _inherits(ComponentValidationError, _Error);

    function ComponentValidationError(message) {
      var _this;

      _classCallCheck(this, ComponentValidationError);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ComponentValidationError).call(this, message));
      _this.name = 'ComponentValidationError';
      return _this;
    }

    return ComponentValidationError;
  }(_wrapNativeSuper(Error));

  var convertToNeutral = function convertToNeutral(value) {
    return value ? intl.number.toString(intl.number.parseFloat(value)) : value;
  };

  var getValidationMethod = function getValidationMethod(validatorType, headId, grid, metadata) {
    var dataType = grid.head.get(headId, 'dataType');
    return function (value) {
      return {
        valid: validators[validatorType](value, metadata),
        validationMessage: aras.getResource('', 'cui_grid.value_property_invalid', dataType)
      };
    };
  };

  var validators = {
    ubigint: function ubigint(value) {
      value = value.trim();
      var uBigIntMaxValue = '18446744073709551615';
      var ubiValue = !isNaN(intl.number.parseInt(value)) && bigInt(value);
      var isValid = ubiValue && !ubiValue.isNegative() && !ubiValue.greater(uBigIntMaxValue);
      return !value || isValid;
    },
    integer: function integer(value) {
      return !value || !isNaN(intl.number.parseInt(value));
    },
    float: function float(value) {
      var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var maximumIntegerDigits = metadata.precision - metadata.scale;
      var float = intl.number.parseFloat(value, isNaN(maximumIntegerDigits) ? undefined : maximumIntegerDigits);
      return !value || !isNaN(float);
    },
    date: function date(value, metadata) {
      return !value || aras.getIomSessionContext().convertToNeutral(value, 'date', metadata.format);
    }
  };

  var createSingularWithTypeAHead = function createSingularWithTypeAHead(componentName, initialState, dom, metadata) {
    var component = document.createElement(componentName);
    var validation = !initialState.validation;
    component.setState(initialState);
    dom.appendChild(component);
    dom.classList.add('aras-grid-active-cell__singular');

    if (metadata && metadata.editorClickHandler) {
      component.showDialogHandler = metadata.editorClickHandler;
    }

    return function () {
      return {
        value: component.state.value,
        willValidate: validation || (component.state.invalid ? function () {
          return Promise.reject(new ComponentValidationError("The invalid state of component: ".concat(componentName)));
        } : function () {
          return Promise.resolve(component.state.value);
        })
      };
    };
  };

  var startInputValidation = function startInputValidation(inputField, checkValidity, grid) {
    inputField.addEventListener('input', function () {
      var validationResult = checkValidity(inputField.value);

      if (validationResult.valid) {
        grid.settings.focusedCell = Object.assign(grid.settings.focusedCell, {
          valid: true,
          toolTipMessage: ''
        });
      } else {
        grid.dom.dispatchEvent(new CustomEvent('notValidEdit', {
          detail: {
            message: validationResult.validationMessage
          }
        }));
      }
    });
  };

  var getWillValidate = function getWillValidate(inputField, metadata) {
    var validate = metadata && metadata.willValidate;

    if (metadata && metadata.checkValidity) {
      var validationResult = metadata.checkValidity(inputField.value);
      validate = validationResult.valid ? validate : function () {
        return Promise.reject(validationResult.validationMessage);
      };
    }

    return validate;
  };

  var createInputField = function createInputField(dom, headId, rowId, value, grid, metadata) {
    var inputField = HyperHTMLElement.hyper(_templateObject$1(), value || value === 0 ? value : '');
    var inputWrapper = HyperHTMLElement.hyper(_templateObject2(), inputField);
    dom.classList.add('aras-grid-active-cell__input', 'aras-form');
    dom.appendChild(inputWrapper);
    var checkValidity = metadata && metadata.checkValidity;

    if (checkValidity) {
      startInputValidation(inputField, checkValidity, grid);
    }

    inputField.focus();
    return inputField;
  };

  var commonEditors = {
    text: function text(dom, headId, rowId, value, grid, metadata) {
      var inputField = createInputField(dom, headId, rowId, value, grid, metadata);
      return function () {
        return {
          value: inputField.value,
          willValidate: getWillValidate(inputField, metadata)
        };
      };
    },
    link: function link(dom, headId, rowId, value, grid, metadata) {
      var inputField = document.createElement('input');
      inputField.type = 'text';
      inputField.value = value || '';
      var inputWrapper = document.createElement('div');
      inputWrapper.classList.add('aras-form-singular', 'aras-form-singular_light');
      var errorSpan = document.createElement('span');
      errorSpan.classList.add('aras-filter-list-icon');
      errorSpan.classList.add('aras-icon-error');
      var span = document.createElement('span');
      span.classList.add('singular__button');

      if (metadata && metadata.editorClickHandler) {
        span.addEventListener('click', metadata.editorClickHandler);
        inputField.addEventListener('keydown', function (e) {
          if (e.key === 'F2') {
            metadata.editorClickHandler();
          }
        });
      }

      inputWrapper.appendChild(inputField);
      inputWrapper.appendChild(errorSpan);
      inputWrapper.appendChild(span);
      dom.classList.add('aras-grid-active-cell__singular', 'aras-form');
      dom.appendChild(inputWrapper);
      inputField.focus();
      return function () {
        return {
          value: inputField.value,
          willValidate: metadata && metadata.willValidate
        };
      };
    },
    calendar: function calendar(dom, headId, rowId, value, grid) {
      var metadata = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
      var inputField = document.createElement('input');
      inputField.type = 'text';
      var format = metadata.format || 'short_date';
      format = format.replace(/[A-Z]/g, function (match) {
        return '_' + match[0].toLowerCase();
      });
      var dateFormat = aras.getDateFormatByPattern(format);
      var dotNetPattern = aras.getDotNetDatePattern(dateFormat);
      var formattedDate = aras.convertFromNeutral(value, 'date', dotNetPattern);
      inputField.value = formattedDate || '';
      var inputWrapper = document.createElement('div');
      inputWrapper.classList.add('aras-form-date');
      var errorSpan = document.createElement('span');
      errorSpan.classList.add('aras-filter-list-icon');
      errorSpan.classList.add('aras-icon-error');
      var span = document.createElement('span');
      span.classList.add('date__button');

      if (metadata && metadata.editorClickHandler) {
        span.addEventListener('click', metadata.editorClickHandler);
        inputField.addEventListener('keydown', function (e) {
          if (e.key === 'F2') {
            metadata.editorClickHandler();
          }
        });
      }

      inputWrapper.appendChild(inputField);
      inputWrapper.appendChild(errorSpan);
      inputWrapper.appendChild(span);
      dom.classList.add('aras-grid-active-cell__calendar', 'aras-form');
      dom.appendChild(inputWrapper);
      inputField.focus();
      var checkValidity = metadata && metadata.checkValidity;

      if (checkValidity) {
        startInputValidation(inputField, checkValidity, grid);
      }

      return function () {
        return {
          value: aras.convertToNeutral(inputField.value, 'date', dotNetPattern),
          willValidate: getWillValidate(inputField, metadata)
        };
      };
    },
    select: function select(dom, headId, rowId, value, grid, metadata) {
      var filterList = document.createElement('aras-filter-list');
      var validation = metadata && metadata.willValidate;
      var options = metadata && (metadata.options || metadata.list);
      filterList.setState({
        list: [{
          value: '',
          label: '',
          filter: ''
        }].concat(_toConsumableArray(options)),
        value: value,
        validation: !validation,
        focus: true
      });
      dom.classList.add('aras-grid-active-cell__select');
      dom.appendChild(filterList);
      return function () {
        var currentValue = filterList.state.value;
        return {
          value: currentValue,
          willValidate: validation || (filterList.state.invalid ? function () {
            return Promise.reject(new ComponentValidationError('State of filter list is invalid'));
          } : function () {
            return Promise.resolve(currentValue);
          })
        };
      };
    }
  };
  var gridEditors = {
    text: commonEditors.text,
    select: commonEditors.select,
    link: commonEditors.link,
    calendar: commonEditors.calendar,
    string: function string(dom, headId, rowId, value, grid, metadata) {
      var clonedMetadata = _objectSpread2({}, metadata);

      clonedMetadata.checkValidity = function (value) {
        var maxLength = metadata.maxLength;
        var pattern = metadata.format;
        var isValidPattern = true;
        var isValidLength = true;

        if (maxLength) {
          isValidLength = value.length <= maxLength;
        }

        if (pattern) {
          var regExp = new RegExp(pattern);
          isValidPattern = !value || regExp.test(value);
        }

        if (!isValidLength || !isValidPattern) {
          var patternValidationMessage = aras.getResource('', 'aras_object.value_property_invalid_must_correspond_with_pattern', pattern);
          var lengthValidationMessage = aras.getResource('', 'aras_object.length_properties_value_canot_be_larger', maxLength);
          return {
            valid: false,
            validationMessage: isValidLength ? patternValidationMessage : lengthValidationMessage
          };
        }

        return {
          valid: true
        };
      };

      return commonEditors.text(dom, headId, rowId, value, grid, clonedMetadata);
    },
    classification: function classification(dom, headId, rowId, value, grid, metadata) {
      var validation = metadata && metadata.willValidate;
      var initialState = {
        list: metadata && (metadata.options || metadata.list),
        validation: !validation,
        value: value,
        focus: true
      };
      return createSingularWithTypeAHead('aras-classification-property', initialState, dom, metadata);
    },
    date: function date(dom, headId, rowId, value, grid, metadata) {
      var clonedMetadata = _objectSpread2({}, metadata, {
        checkValidity: getValidationMethod('date', headId, grid, metadata)
      });

      return commonEditors.calendar(dom, headId, rowId, value, grid, clonedMetadata);
    },
    list: commonEditors.select,
    'filter list': function filterList(dom, headId, rowId, value, grid, metadata) {
      var clonedMetadata = _objectSpread2({}, metadata);

      var propertyName = grid.head.get(headId, 'pattern');
      var columnName = grid.settings.indexHead.find(function (columnName) {
        return columnName.startsWith(propertyName);
      });
      var filterValue = grid.rows.get(rowId, propertyName || columnName);

      if (filterValue) {
        clonedMetadata.list = clonedMetadata.list.filter(function (option) {
          return option.filter === '' || option.filter === filterValue;
        });
      }

      return commonEditors.select(dom, headId, rowId, value, grid, clonedMetadata);
    },
    'color list': commonEditors.select,
    decimal: function decimal(dom, headId, rowId, value, grid, metadata) {
      var clonedMetadata = _objectSpread2({}, metadata, {
        checkValidity: getValidationMethod('float', headId, grid, metadata)
      });

      var inputField = createInputField(dom, headId, rowId, convertToNeutral(value), grid, clonedMetadata);
      return function () {
        return {
          value: convertToNeutral(inputField.value),
          willValidate: getWillValidate(inputField, clonedMetadata)
        };
      };
    },
    float: function float(dom, headId, rowId, value, grid, metadata) {
      var clonedMetadata = _objectSpread2({}, metadata, {
        checkValidity: getValidationMethod('float', headId, grid)
      });

      var inputField = createInputField(dom, headId, rowId, convertToNeutral(value), grid, clonedMetadata);
      return function () {
        return {
          value: convertToNeutral(inputField.value),
          willValidate: getWillValidate(inputField, clonedMetadata)
        };
      };
    },
    integer: function integer(dom, headId, rowId, value, grid, metadata) {
      var clonedMetadata = _objectSpread2({}, metadata, {
        checkValidity: getValidationMethod('integer', headId, grid)
      });

      return commonEditors.text(dom, headId, rowId, value, grid, clonedMetadata);
    },
    ubigint: function ubigint(dom, headId, rowId, value, grid, metadata) {
      var clonedMetadata = _objectSpread2({}, metadata, {
        checkValidity: getValidationMethod('ubigint', headId, grid)
      });

      var inputField = createInputField(dom, headId, rowId, value, grid, clonedMetadata);
      return function () {
        return {
          value: inputField.value.trim(),
          willValidate: getWillValidate(inputField, clonedMetadata)
        };
      };
    },
    md5: function md5(dom, headId, rowId, value, grid, metadata) {
      return commonEditors.text(dom, headId, rowId, '***', grid, metadata);
    },
    federated: commonEditors.text,
    ml_string: function ml_string(dom, headId, rowId, value, grid, metadata) {
      var inputField = createInputField(dom, headId, rowId, value, grid, metadata);
      inputField.addEventListener('keydown', function (e) {
        if (e.key === 'F2') {
          metadata.editorClickHandler();
        }
      });
      return function () {
        return {
          value: inputField.value
        };
      };
    },
    item: function item(dom, headId, rowId, value, grid, metadata) {
      var propertyName = grid.head.get(headId, 'name') || headId;
      var itemName = grid.rows.get(rowId, "".concat(propertyName, "@aras.keyed_name")) || value;
      var validation = metadata && metadata.willValidate;
      var initialState = {
        itemType: metadata && metadata.itemType,
        validation: !validation,
        value: itemName,
        focus: true
      };
      return createSingularWithTypeAHead('aras-item-property', initialState, dom, metadata);
    },
    mv_list: function mv_list(dom, headId, rowId, value, grid, metadata) {
      var checkedValues = value ? value.split(',') : [];
      var dropdownNode;

      var selectValue = function selectValue(e) {
        e.preventDefault();
        var listNode = e.target.closest('.aras-list-item');

        if (!listNode) {
          return;
        }

        var selectedValue = listNode.dataset.value;
        var indexInCheckedList = checkedValues.indexOf(selectedValue);

        if (indexInCheckedList === -1) {
          checkedValues.push(selectedValue);
        } else {
          checkedValues.splice(indexInCheckedList, 1);
        }

        render();
      };

      var render = function render() {
        var items = (metadata.options || metadata.list || []).map(function (item) {
          var isOptionChecked = checkedValues.indexOf(item.value) !== -1;
          return HyperHTMLElement.hyper(item, ":id:".concat(item.value))(_templateObject3(), item.value, isOptionChecked, item.label);
        });
        var inputField = HyperHTMLElement.hyper(dom, ":id:".concat(checkedValues.length))(_templateObject4(), aras.getResource('', 'common.items_selected', checkedValues.length));
        var listNode = HyperHTMLElement.hyper(items)(_templateObject5(), selectValue, items);
        dropdownNode = HyperHTMLElement.hyper(checkedValues)(_templateObject6(), inputField, listNode);
      };

      render();
      dom.appendChild(dropdownNode);
      return function () {
        return {
          value: checkedValues
        };
      };
    }
  };

  var widthCache = {};
  var tooltipPaddings = 26;
  var canvasElement;
  var documentStyle;

  function getTooltipWidth(message) {
    documentStyle = documentStyle || window.getComputedStyle(document.documentElement);
    canvasElement = canvasElement || document.createElement('canvas');
    var context = canvasElement.getContext('2d');
    context.font = "".concat(documentStyle.fontSize, " ").concat(documentStyle.fontFamily);
    var metrics = context.measureText(message);
    return metrics.width + tooltipPaddings;
  }

  function getTooltipPosition(elementNode, containerNode, message) {
    var elementRectangle = elementNode.getBoundingClientRect();
    var containerRectangle = containerNode.getBoundingClientRect();
    widthCache[message] = widthCache[message] || getTooltipWidth(message);
    var tooltipNodeWidth = widthCache[message];
    var leftSpace = elementRectangle.left - containerRectangle.left;
    var rightSpace = containerRectangle.right - elementRectangle.right;
    return rightSpace < tooltipNodeWidth && leftSpace >= tooltipNodeWidth ? 'left' : 'right';
  }

  function _templateObject4$1() {
    var data = _taggedTemplateLiteral(["\n\t\t\t\t<p\n\t\t\t\t\tid=\"", "\"\n\t\t\t\t\tclass=\"aras-grid-reader\"\n\t\t\t\t\trole=\"alert\"\n\t\t\t\t\taria-atomic=\"true\"\n\t\t\t\t>", "</p>\n\t\t\t"]);

    _templateObject4$1 = function _templateObject4() {
      return data;
    };

    return data;
  }

  function _templateObject3$1() {
    var data = _taggedTemplateLiteral(["\n\t\t\t\t", "\n\t\t\t\t<div id=\"", "\" aria-label=\"", "\" />\n\t\t\t\t<div id=\"", "\" aria-label=\"", "\" />\n\t\t\t"]);

    _templateObject3$1 = function _templateObject3() {
      return data;
    };

    return data;
  }

  function _templateObject2$1() {
    var data = _taggedTemplateLiteral(["\n\t\t\t\t<div\n\t\t\t\t\tid=\"", "\"\n\t\t\t\t\tclass=\"aras-grid-reader\"\n\t\t\t\t\ttabindex=\"-1\"\n\t\t\t\t\trole=\"textbox\"\n\t\t\t\t\taria-activedescendant=\"", "\"\n\t\t\t\t\taria-owns=\"", "\"\n\t\t\t\t></div>\n\t\t\t"]);

    _templateObject2$1 = function _templateObject2() {
      return data;
    };

    return data;
  }

  function _templateObject$2() {
    var data = _taggedTemplateLiteral(["<div style=\"width: 0; height: 0; position: absolute; top: 50%; left: 50%;\" />"]);

    _templateObject$2 = function _templateObject() {
      return data;
    };

    return data;
  }
  var TDBorderHeight = 1; // 1 is a TD border height, that cannot be calculated via getcomputedStyle or something

  var GridView =
  /*#__PURE__*/
  function () {
    function GridView(dom, options) {
      var _this = this;

      _classCallCheck(this, GridView);

      this.delayForDragDetection = 200;
      this.dom = dom;
      this.defaultSettings = {
        rowHeight: 32,
        headWidth: 18,
        multiSelect: true,
        resizable: true,
        search: false,
        editable: false,
        sortable: true,
        freezableColumns: false,
        draggableColumns: true
      };
      Object.assign(this.defaultSettings, options || {});
      this.readerIds = {};
      this.initialization();

      this._createLayout();

      var resizeHandler = function resizeHandler() {
        return _this._resizeWindowHandler();
      };

      this.handlers = [{
        target: this.bodyBoundary,
        action: 'scroll',
        handler: this._scrollHandler.bind(this)
      }, {
        target: this.header,
        action: 'mousedown',
        handler: this._resizeHandler.bind(this)
      }, {
        target: this.header,
        action: 'click',
        handler: this._sortHandler.bind(this)
      }, {
        target: this.header,
        action: 'focusin',
        handler: this._focusInHeadHandler.bind(this)
      }, {
        target: this.body,
        action: 'mousedown',
        handler: this._mouseDownHandler.bind(this)
      }, {
        target: this.dom,
        action: 'focusout',
        handler: this._focusoutHandler.bind(this)
      }, {
        target: window,
        action: 'resize',
        handler: resizeHandler
      }];
      var observer = new MutationObserver(function (e) {
        if (e[0].removedNodes.length) {
          window.removeEventListener('resize', resizeHandler);
          observer.disconnect();
        }
      });
      observer.observe(dom, {
        childList: true
      });

      if (this.defaultSettings.draggableColumns) {
        this.handlers.push({
          target: this.header,
          action: 'mousedown',
          handler: this._detectColumnDragAction.bind(this)
        });
      }

      if (this.defaultSettings.freezableColumns) {
        this.handlers = this.handlers.concat([{
          target: this.dom,
          action: 'mousedown',
          handler: this._freezeColumnsHandler.bind(this)
        }, {
          target: this.frozenBodyBoundary,
          action: 'wheel',
          handler: this._frozenScrollHandler.bind(this)
        }, {
          target: this.body,
          action: 'mouseover',
          handler: this._hoverRow.bind(this)
        }, {
          target: this.body,
          action: 'mouseleave',
          handler: this._hoverRow.bind(this)
        }]);
      }
    }

    _createClass(GridView, [{
      key: "initialization",
      value: function initialization() {
        this.templates = gridTemplates();
      }
    }, {
      key: "_createLayout",
      value: function _createLayout() {
        this.dom.classList.add('aras-grid');
        this.dom.setAttribute('role', 'grid');
        this.reader = HyperHTMLElement.wire()(_templateObject$2());
        this.header = document.createElement('div');
        this.header.className = 'aras-grid-header';
        this.headerBoundary = document.createElement('div');
        this.headerBoundary.className = 'aras-grid-header-boundary';
        this.body = document.createElement('div');
        this.body.className = 'aras-grid-body';
        this.body.tabIndex = 0;
        this.bodyBoundary = document.createElement('div');
        this.bodyBoundary.className = 'aras-grid-body-boundary';
        this.scroller = document.createElement('div');
        this.scroller.className = 'aras-grid-scroller';
        this.activeCell = document.createElement('div');
        this.activeCell.className = 'aras-grid-active-cell';
        this.resizeLine = document.createElement('div');
        this.resizeLine.className = 'aras-grid-resize-line';
        this.ddline = document.createElement('div');
        this.ddline.className = 'aras-grid-ddline';
        this.ddcontainer = document.createElement('div');
        this.ddcontainer.className = 'aras-grid-ddcontainer';

        if (this.defaultSettings.freezableColumns) {
          this.frozenHeaderBoundary = document.createElement('div');
          this.frozenHeaderBoundary.className = 'aras-grid-header-boundary aras-grid-header-boundary_frozen';
          this.frozenBodyBoundary = document.createElement('div');
          this.frozenBodyBoundary.className = 'aras-grid-body-boundary aras-grid-body-boundary_frozen';
          this.frozenScroller = document.createElement('div');
          this.frozenScroller.className = 'aras-grid-scroller';
          this.frozenActiveCell = document.createElement('div');
          this.frozenActiveCell.className = 'aras-grid-active-cell';
          this.freezer = document.createElement('div');
          this.freezer.className = 'aras-grid-freezer';
          this.header.appendChild(this.frozenHeaderBoundary);
          this.body.appendChild(this.frozenBodyBoundary);
          this.frozenBodyBoundary.appendChild(this.frozenScroller);
        }

        this.header.appendChild(this.headerBoundary);
        this.body.appendChild(this.bodyBoundary);
        this.body.appendChild(this.reader);
        this.bodyBoundary.appendChild(this.scroller);
      }
    }, {
      key: "_addHandlers",
      value: function _addHandlers() {
        this.handlers.forEach(function (item) {
          item.target.addEventListener(item.action, item.handler);
        });
      }
    }, {
      key: "_setScrollSize",
      value: function _setScrollSize() {
        var settings = this.data.settings;

        var commonWidth = this._getHeadRangeWidth(settings.frozenColumns, settings.indexHead.length);

        var scrollerHeight = Math.max(settings.indexRows.length * this.defaultSettings.rowHeight + TDBorderHeight, TDBorderHeight);
        this.scroller.style.height = scrollerHeight + 'px';
        this.scroller.style.width = commonWidth + 'px';

        if (this.defaultSettings.freezableColumns) {
          var frozenWidth = this._getHeadRangeWidth(0, settings.frozenColumns);

          this.frozenScroller.style.height = scrollerHeight + 'px';
          this.frozenScroller.style.width = frozenWidth + TDBorderHeight + 'px';
        }
      }
    }, {
      key: "_getRowsCount",
      value: function _getRowsCount() {
        return Math.ceil(this.bodyBoundary.clientHeight / this.defaultSettings.rowHeight) + 1;
      }
    }, {
      key: "_getHeadCount",
      value: function _getHeadCount(firstHead) {
        var length = this.data.settings.indexHead.length;

        var frozenViewportWidth = this._getHeadRangeWidth(0, this.data.settings.frozenColumns);

        var neededWidth = this.dom.clientWidth - frozenViewportWidth + this._getHeadWidth(firstHead);

        var i;

        for (i = firstHead; i < length; i++) {
          if (neededWidth <= 0) {
            break;
          }

          neededWidth -= this._getHeadWidth(i);
        }

        return i - firstHead;
      }
    }, {
      key: "_findFirstRow",
      value: function _findFirstRow() {
        var firstRow = this.bodyBoundary.scrollTop / this.defaultSettings.rowHeight | 0;
        firstRow = firstRow % 2 ? firstRow - 1 : firstRow;
        return firstRow;
      }
    }, {
      key: "_findFirstHead",
      value: function _findFirstHead() {
        var i = this.data.settings.frozenColumns;
        var width = 0;

        while (width <= this.bodyBoundary.scrollLeft) {
          width += this._getHeadWidth(i);
          i++;
        }

        return i - 1;
      }
    }, {
      key: "_correctCacheAfterScroll",
      value: function _correctCacheAfterScroll(cache) {
        var delta = this.bodyBoundary.scrollLeft - cache.viewportTranslateX;

        var firstHeadWidth = this._getHeadWidth(cache.firstHead);

        if (delta > 0) {
          while (delta > firstHeadWidth) {
            delta -= firstHeadWidth;
            cache.firstHead++;
            firstHeadWidth = this._getHeadWidth(cache.firstHead);
          }
        } else {
          while (delta < 0) {
            cache.firstHead--;
            firstHeadWidth = this._getHeadWidth(cache.firstHead);
            delta += firstHeadWidth;
          }
        }

        cache.viewportTranslateX = this.bodyBoundary.scrollLeft - delta;
        cache.prevScrollLeftPosition = this.bodyBoundary.scrollLeft;
      }
    }, {
      key: "_getRowsForRender",
      value: function _getRowsForRender(firstRow, rowsCount) {
        var rowsForRender = [];
        var maxRowsCount = Math.min(firstRow + rowsCount, this.data.settings.indexRows.length);
        var selectedRows = new Set(this.data.settings.selectedRows);

        for (var i = firstRow; i < maxRowsCount; i++) {
          var id = this.data.settings.indexRows[i];

          var row = this.data.rows._store.get(id);

          rowsForRender.push({
            index: i,
            id: id,
            selected: selectedRows.has(id),
            data: row || {},
            hovered: this.defaultSettings.freezableColumns ? i === this._hoveredIndex : null
          });
        }

        return rowsForRender;
      }
    }, {
      key: "_getHeadForRender",
      value: function _getHeadForRender(firstHead, headCount) {
        var headForRender = [];
        var length = Math.min(firstHead + headCount, this.data.settings.indexHead.length);

        for (var i = firstHead; i < length; i++) {
          var id = this.data.settings.indexHead[i];
          var sortIndex = -1;

          for (var j = 0; j < this.data.settings.orderBy.length; j++) {
            if (this.data.settings.orderBy[j].headId === id) {
              sortIndex = j;
              break;
            }
          }

          headForRender.push({
            index: i,
            id: id,
            sort: sortIndex < 0 ? null : {
              index: sortIndex + 1,
              desc: this.data.settings.orderBy[sortIndex].desc
            },
            data: this.data.head._store.get(id) || {}
          });
        }

        return headForRender;
      }
    }, {
      key: "_getHeadRangeWidth",
      value: function _getHeadRangeWidth(from, to) {
        var width = 0;

        for (var i = from; i < to; i++) {
          width += this._getHeadWidth(i);
        }

        return width;
      }
    }, {
      key: "_getHeadWidth",
      value: function _getHeadWidth(index) {
        var settings = this.data.settings;

        var head = this.data.head._store.get(settings.indexHead[index]);

        return head && head.width ? head.width : this.defaultSettings.headWidth;
      }
    }, {
      key: "_getViewportStyle",
      value: function _getViewportStyle(viewportTranslateX, viewportTranslateY, viewportWidth) {
        return {
          width: typeof viewportWidth === 'string' ? viewportWidth : "".concat(viewportWidth, "px"),
          transform: 'translate3d(' + viewportTranslateX + 'px, ' + viewportTranslateY + 'px, 0)'
        };
      }
    }, {
      key: "_getHeadStyle",
      value: function _getHeadStyle(viewportTranslateX, viewportWidth) {
        return {
          width: "".concat(viewportWidth, "px"),
          transform: 'translate3d(' + (viewportTranslateX - this.bodyBoundary.scrollLeft) + 'px, 0, 0)'
        };
      }
    }, {
      key: "_scrollToHead",
      value: function _scrollToHead(indexHead) {
        if (indexHead < this.data.settings.frozenColumns) {
          return;
        }

        var cellLeftPosition = this._getHeadRangeWidth(this.data.settings.frozenColumns, indexHead);

        var cellRightPosition = cellLeftPosition + this._getHeadWidth(indexHead) - this.bodyBoundary.clientWidth;
        var result = this.bodyBoundary.scrollLeft = Math.max(cellRightPosition, Math.min(cellLeftPosition, this.bodyBoundary.scrollLeft));
        return result;
      }
    }, {
      key: "_scrollToRow",
      value: function _scrollToRow(indexRow) {
        var cellTopPosition = indexRow * this.defaultSettings.rowHeight;

        if (cellTopPosition > this.bodyBoundary.scrollTop && cellTopPosition < this.bodyBoundary.scrollTop + this.bodyBoundary.clientHeight) {
          return;
        }

        this.bodyBoundary.scrollTop = cellTopPosition;
      }
    }, {
      key: "_getCellFromEvent",
      value: function _getCellFromEvent(event) {
        var targetRow = event.target.closest('.aras-grid-row');
        var targetCell = event.target.closest('.aras-grid-row > td');

        if (!targetRow || !targetCell) {
          return;
        }

        var indexRow = +targetRow.dataset.index;
        var cellNumber = Array.prototype.indexOf.call(targetRow.children, targetCell);
        var inFrozenArea = event.target.closest('.aras-grid-body-boundary_frozen');
        var settings = this.data.settings;
        var firstHead = inFrozenArea ? 0 : this.cache.firstHead;
        var lastHead = inFrozenArea ? settings.frozenColumns : this._getHeadCount(firstHead);

        if (this.defaultSettings.disableXLazyRendering && !inFrozenArea) {
          firstHead = settings.frozenColumns;
          lastHead = settings.indexHead.length;
        }

        var headForRender = this._getHeadForRender(firstHead, lastHead);

        var indexHead = headForRender[cellNumber].index;
        return {
          indexHead: indexHead,
          indexRow: indexRow
        };
      }
    }, {
      key: "_renderActiveCell",
      value: function _renderActiveCell(prev) {
        var defaultClass = 'aras-grid-active-cell';
        var showedClass = 'aras-grid-active-cell_showed';
        var editingClass = 'aras-grid-active-cell_editing';
        var notAnimatedClass = 'aras-grid-active-cell_notanimated';
        var next = this.cache.focusedCell;
        var freezableColumns = this.defaultSettings.freezableColumns;

        if (!next) {
          this.activeCell.className = defaultClass;

          if (freezableColumns) {
            this.frozenActiveCell.className = defaultClass;
          }

          return;
        }

        var headId = next.headId;
        var rowId = next.rowId;
        var indexHead = this.data.settings.indexHead.indexOf(headId);
        var indexRow = this.data.settings.indexRows.indexOf(rowId);

        if (indexHead < 0 || indexRow < 0) {
          this.activeCell.classList.remove(showedClass);

          if (freezableColumns) {
            this.frozenActiveCell.classList.remove(showedClass);
          }

          return;
        }

        var frozenColumns = this.data.settings.frozenColumns;
        var firstColumnIndex;
        var currentActiveCell;

        if (indexHead < frozenColumns) {
          firstColumnIndex = 0;
          currentActiveCell = this.frozenActiveCell;
          this.activeCell.className = defaultClass;
        } else {
          firstColumnIndex = frozenColumns;
          currentActiveCell = this.activeCell;

          if (freezableColumns) {
            this.frozenActiveCell.className = defaultClass;
          }
        }

        var leftPosition = this._getHeadRangeWidth(firstColumnIndex, indexHead);

        var topPosition = indexRow * this.defaultSettings.rowHeight;

        if (next.editing) {
          currentActiveCell.style.left = leftPosition + 'px';
          currentActiveCell.style.top = topPosition + 'px';
          currentActiveCell.style.transform = 'translate3d(0, 0, 0)';
        } else {
          currentActiveCell.style.left = '0';
          currentActiveCell.style.top = '0';
          currentActiveCell.style.transform = 'translate3d(' + leftPosition + 'px, ' + topPosition + 'px, 0)';
        }

        currentActiveCell.style.width = this._getHeadWidth(indexHead) + 1 + 'px';
        currentActiveCell.style.height = this.defaultSettings.rowHeight + 1 + 'px';
        currentActiveCell.classList.add(showedClass);

        if (prev === next) {
          return;
        }

        if (this.body.setActive) {
          // IE11 workaround: focus method leads to implicit to scrollIntoView call and looks like content jumps on the page
          // if grid doesn't fit viewport, so setActive is used instead
          try {
            // 'Invalid function' exception can be thrown if target node is hidden
            this.body.setActive();
          } catch (_unused) {// continue regardless of error
          }
        } else {
          // required to keep focus inside grid control when content of currentActiveCell is dropped (currentActiveCell.innerHTML = '')
          // and it has focus before this
          this.body.focus({
            preventScroll: true
          });
        }

        currentActiveCell.innerHTML = '';
        currentActiveCell.classList.toggle(notAnimatedClass, next.editing);
        currentActiveCell.classList.toggle(editingClass, next.editing);

        this._setupReader(indexHead, indexRow);

        if (!next.editing) {
          currentActiveCell.className = defaultClass + ' ' + showedClass;
          return;
        }

        var propertyName = this.data.head.get(headId, 'name') || headId;
        var linkProperty = this.data.head.get(headId, 'linkProperty');
        var itemId = linkProperty ? this.data.rows.get(rowId, linkProperty) : rowId;
        var value = this.data.rows.get(itemId, propertyName);

        var editorType = this.data._getEditorType(headId, itemId, value, this.data, rowId);

        var cellMetadata = this.data.getCellMetadata(headId, itemId, editorType);

        if (cellMetadata) {
          Object.assign(cellMetadata, {
            rowId: rowId
          });
        }

        this.validator = gridEditors[editorType](currentActiveCell, headId, itemId, value, this.data, cellMetadata);
      }
    }, {
      key: "_setupReader",
      value: function _setupReader(indexHead, indexRow) {
        if (!this.readerIds.readerId) {
          var postfix = Date.now();
          this.readerIds = {
            readerId: 'reader' + postfix,
            edgeReader: 'edgeReader' + postfix,
            dataNode1: 'dataNode1' + postfix,
            dataNode2: 'dataNode2' + postfix,
            activeReader: this.readerIds.dataNode1
          };
        }

        var reader = this.reader;
        var _this$cache$focusedCe = this.cache.focusedCell,
            headId = _this$cache$focusedCe.headId,
            rowId = _this$cache$focusedCe.rowId;
        var head = this.data.head;
        var headLabel = head.get(headId, 'label') || indexHead + 1;
        var headName = head.get(headId, 'name');
        var cellData = this.data.rows.get(rowId, headName || headId);
        var cellValue = cellData || cellData === false ? cellData : aras.getResource('', 'grid_reader.empty');
        var message = "".concat(cellValue, ".").concat(headLabel, " ").concat(indexRow + 1, " ."); // Edge and Firefox not support alert role with NVDA

        if (/Edge\/(\d+)|Firefox\/(\S+)/.test(window.navigator.userAgent)) {
          var _this$readerIds = this.readerIds,
              edgeReader = _this$readerIds.edgeReader,
              dataNode1 = _this$readerIds.dataNode1,
              dataNode2 = _this$readerIds.dataNode2;
          this.readerIds.activeReader = this.readerIds.activeReader === dataNode1 ? dataNode2 : dataNode1;
          var ariaOwns = "".concat(dataNode1, " ").concat(dataNode2);
          var edgeReaderNode = HyperHTMLElement.hyper(_templateObject2$1(), edgeReader, this.readerIds.activeReader, ariaOwns);
          HyperHTMLElement.hyper(reader)(_templateObject3$1(), edgeReaderNode, dataNode1, message, dataNode2, message);
          edgeReaderNode.focus();
        } else {
          HyperHTMLElement.hyper(reader)(_templateObject4$1(), this.readerIds.readerId, message);
        }
      }
    }, {
      key: "_scrollHandler",
      value: function _scrollHandler() {
        if (this.cache && this.cache.prevScrollLeftPosition !== this.bodyBoundary.scrollLeft) {
          if (!this.defaultSettings.disableXLazyRendering) {
            this._correctCacheAfterScroll(this.cache);
          }

          var activeElem = document.activeElement;

          if (activeElem && activeElem.closest && activeElem.closest('.aras-grid-search-row-cell')) {
            this.body.focus();
          }
        }

        if (window.ActiveXObject !== undefined) {
          if (this.timeoutForIE) {
            return;
          }

          this.timeoutForIE = true;
          window.setImmediate(function (grid) {
            grid._render();

            grid.timeoutForIE = null;
          }, this);
        } else {
          this._render();
        }

        if (this.defaultSettings.freezableColumns) {
          this._hoverRow();
        }
      }
    }, {
      key: "_frozenScrollHandler",
      value: function _frozenScrollHandler(e) {
        var _this2 = this;

        var scrollTime = 468; // This is the average animation scroll time in browsers, and it is also used in polyfill

        var scrollDistance = 100;

        if (this._scrollAnimationTimeout) {
          scrollDistance = 120;
          clearTimeout(this._scrollAnimationTimeout);
        } else {
          this._scrollTopPosition = this.bodyBoundary.scrollTop;
        }

        this._scrollTopPosition = Math.max(this._scrollTopPosition + (e.deltaY > 0 ? scrollDistance : -scrollDistance), 0);

        if (!this._scrollTimeout) {
          this._scrollTimeout = setTimeout(function () {
            _this2.bodyBoundary.scroll({
              top: _this2._scrollTopPosition,
              behavior: 'smooth'
            });

            _this2._scrollTimeout = null;
          }, 0);
        }

        this._scrollAnimationTimeout = setTimeout(function () {
          _this2._scrollAnimationTimeout = null;
        }, scrollTime);
      }
    }, {
      key: "_hoverRow",
      value: function _hoverRow() {
        var hoverRow = this.dom.querySelector('.aras-grid-row:hover');
        var index = hoverRow ? +hoverRow.dataset.index : null;

        if (this._hoveredIndex !== index) {
          this._hoveredIndex = index;

          this._render();
        }
      }
    }, {
      key: "_resizeHandler",
      value: function _resizeHandler(e) {
        if (!e.target.classList || !e.target.classList.contains('aras-grid-head-cell-resize')) {
          return;
        }

        var resizeZoneOffset = e.target.getBoundingClientRect();
        var containerOffset = this.dom.getBoundingClientRect();
        var startOffset = resizeZoneOffset.left - containerOffset.left;
        var correctionOffset = e.pageX - startOffset;
        var resizeClass = 'aras-grid-resize-line_draggable';
        var startPosition = e.pageX;
        var targetCell = e.target.closest('.aras-grid-head-cell');
        var indexHead = targetCell.dataset.index;
        var resizeLine = this.resizeLine;
        resizeLine.classList.add(resizeClass);
        resizeLine.style.transform = 'translateX(' + startOffset + 'px)';

        var mouseMoveHandler = function mouseMoveHandler(e) {
          resizeLine.style.transform = 'translateX(' + (e.pageX - correctionOffset) + 'px)';
        };

        var mouseUpHandler = function (e) {
          var delta = e.pageX - startPosition;
          delta *= document.documentElement.dir === 'rtl' ? -1 : 1;
          var resizeEvent = new CustomEvent('resizeHead', {
            detail: {
              index: indexHead,
              delta: delta
            }
          });
          this.dom.dispatchEvent(resizeEvent);
          resizeLine.classList.remove(resizeClass);
          document.removeEventListener('mousemove', mouseMoveHandler);
          document.removeEventListener('mouseup', mouseUpHandler);
        }.bind(this);

        document.addEventListener('mousemove', mouseMoveHandler);
        document.addEventListener('mouseup', mouseUpHandler);
        e.stopPropagation();
      }
    }, {
      key: "_columnDragHandler",
      value: function _columnDragHandler(e) {
        if (!e.target.classList || e.target.classList.contains('aras-grid-head-cell-resize') || !e.target.closest('.aras-grid-head-cell')) {
          return;
        }

        this._dragTimeout = null;
        var headCell = e.target.closest('.aras-grid-head-cell');
        var scrollTimeout;
        var scrollSpeed;
        var scrollDirection;
        var scrollWidth = 100;
        var ddcontainer = this.ddcontainer;
        var ddline = this.ddline;
        var startIndex = +headCell.dataset.index;
        var frozenColumns = this.data.settings.frozenColumns;

        if (startIndex < frozenColumns) {
          return;
        }

        var endIndex = startIndex;
        var headOffset = headCell.getBoundingClientRect();
        var containerOffset = this.dom.getBoundingClientRect();
        var startOffset = headOffset.left - containerOffset.left;
        var correctionOffset = e.pageX - startOffset;
        var dragColumnClass = 'aras-grid-ddcontainer_draggable-column';
        var dragLineClass = 'aras-grid-ddline_draggable-column';
        var bodyBoundaryOffset = this.bodyBoundary.getBoundingClientRect();

        var startScroll = function () {
          scrollTimeout = setTimeout(function () {
            var s = scrollSpeed / scrollWidth;
            var baseSpeed = 2;
            this.bodyBoundary.scrollLeft += scrollDirection * (s * s * scrollSpeed + baseSpeed);
            startScroll();
          }.bind(this), 0);
        }.bind(this);

        var stopScroll = function stopScroll() {
          if (scrollTimeout) {
            clearTimeout(scrollTimeout);
            scrollTimeout = false;
          }
        };

        var mouseMoveHandler = function (e) {
          var positionX = e.pageX - (this.cache.viewportTranslateX - this.bodyBoundary.scrollLeft + bodyBoundaryOffset.left);
          var rPosition = e.pageX - (containerOffset.left + this.dom.clientWidth - scrollWidth);
          var lPosition = scrollWidth - (e.pageX - containerOffset.left - bodyBoundaryOffset.left);
          var inRightScroll = rPosition >= 0 && rPosition <= scrollWidth;
          var inLeftScroll = lPosition >= 0 && lPosition <= scrollWidth;

          if (inRightScroll || inLeftScroll) {
            scrollSpeed = inRightScroll ? rPosition : lPosition;
            scrollDirection = inRightScroll ? 1 : -1;

            if (!scrollTimeout) {
              startScroll();
            }
          } else {
            stopScroll();
          }

          endIndex = this.cache.firstHead;

          while (positionX >= this._getHeadWidth(endIndex)) {
            positionX -= this._getHeadWidth(endIndex);
            endIndex++;
          }

          ddline.classList.add(dragLineClass);
          ddcontainer.style.transform = 'translateX(' + (e.pageX - correctionOffset) + 'px)';
          var endHeadCell = this.headerBoundary.querySelector('.aras-grid-head-cell[data-index="' + endIndex + '"]');

          if (!endHeadCell) {
            return;
          }

          var endHeadCellOffset = endHeadCell.getBoundingClientRect();
          var ddLinePosition = endHeadCellOffset.left - containerOffset.left + (startIndex <= endIndex ? endHeadCell.clientWidth : 0);
          ddline.style.transform = 'translateX(' + ddLinePosition + 'px)';
        }.bind(this);

        var mouseUpHandler = function (e) {
          stopScroll();
          ddline.classList.remove(dragLineClass);
          ddcontainer.classList.remove(dragColumnClass);
          document.removeEventListener('mousemove', mouseMoveHandler);
          document.removeEventListener('mouseup', mouseUpHandler);

          if (!e.target || !e.target.closest || !e.target.closest('.aras-grid') || startIndex === endIndex || endIndex < frozenColumns) {
            return;
          }

          this.dom.dispatchEvent(new CustomEvent('moveHead', {
            detail: {
              startIndex: startIndex,
              endIndex: endIndex
            }
          }));
        }.bind(this);

        document.addEventListener('mousemove', mouseMoveHandler);
        document.addEventListener('mouseup', mouseUpHandler);
        ddcontainer.classList.add(dragColumnClass);
        ddcontainer.style.width = headCell.clientWidth + 'px';
        ddcontainer.style.transform = 'translateX(' + startOffset + 'px)';
        e.stopPropagation();
      }
    }, {
      key: "_detectColumnDragAction",
      value: function _detectColumnDragAction(event) {
        if (event.button === 2) {
          return;
        }

        this._dragTimeout = window.setTimeout(this._columnDragHandler.bind(this, event), this.delayForDragDetection);
      }
    }, {
      key: "_sortHandler",
      value: function _sortHandler(e) {
        if (!this.defaultSettings.sortable) {
          window.clearTimeout(this._dragTimeout);
          this._dragTimeout = null;
          return;
        }

        var headCell = e.target.closest('.aras-grid-head-cell');

        if (!headCell || this._dragTimeout === null) {
          return;
        }

        window.clearTimeout(this._dragTimeout);
        var index = +headCell.dataset.index;
        this.dom.dispatchEvent(new CustomEvent('sort', {
          detail: {
            index: index,
            ctrlKey: e.ctrlKey || e.metaKey
          }
        }));
      }
    }, {
      key: "_mouseDownHandler",
      value: function _mouseDownHandler(e) {
        var clickedCell = this._getCellFromEvent(e);

        if (!clickedCell) {
          return;
        }

        var isCtrl = e.ctrlKey || e.metaKey;
        var isShift = e.shiftKey;
        var type = !this.defaultSettings.multiSelect ? 'single' : isCtrl ? 'ctrl' : isShift ? 'shift' : 'single';
        var selectEvent = new CustomEvent('selectRow', {
          detail: {
            index: clickedCell.indexRow,
            type: type
          }
        });
        var settings = this.data.settings;
        var rowId = settings.indexRows[clickedCell.indexRow];
        var headId = settings.indexHead[clickedCell.indexHead];
        var isRowIncludesFocusCell = settings.selectedRows.includes(rowId);
        var isClickOnLeftButton = e.button === 0;
        var isClickOnRightButton = e.button === 2;
        var prevFocusedCell = settings.focusedCell;
        var isClickAnotherCell = !prevFocusedCell || prevFocusedCell.headId !== headId || prevFocusedCell.rowId !== rowId;

        if (isClickAnotherCell || isClickOnLeftButton && !isCtrl && !isShift) {
          var focusEvent = new CustomEvent('focusCell', {
            detail: _objectSpread2({}, clickedCell, {
              forceEdit: !(isClickAnotherCell && (isCtrl || isShift || isClickOnRightButton)) && this.defaultSettings.editable && isRowIncludesFocusCell
            })
          });
          this.dom.dispatchEvent(focusEvent);
        }

        if (isClickOnLeftButton || e.button === 2 && !isRowIncludesFocusCell) {
          this.dom.dispatchEvent(selectEvent);
        }

        if ('ActiveXObject' in window) {
          document.onselectstart = function () {
            return false;
          };

          setTimeout(function () {
            document.onselectstart = null;
          }, 0);
        }
      }
    }, {
      key: "_focusInHeadHandler",
      value: function _focusInHeadHandler(e) {
        var headCell = e.target.closest('.aras-grid-search-row-cell');

        if (!headCell) {
          return;
        }

        var index = +headCell.dataset.index;
        var focusEvent = new CustomEvent('focusCell', {
          detail: {
            indexHead: index,
            indexRow: 'searchRow'
          }
        });
        this.dom.dispatchEvent(focusEvent);
      }
    }, {
      key: "_resizeWindowHandler",
      value: function _resizeWindowHandler() {
        this.render(this.data);
      }
    }, {
      key: "_focusoutHandler",
      value: function _focusoutHandler(e) {
        if (!e.relatedTarget || e.relatedTarget.closest('.aras-grid') !== this.dom) {
          this.dom.dispatchEvent(new CustomEvent('focusCell'));
        }
      }
    }, {
      key: "_freezeColumnsHandler",
      value: function _freezeColumnsHandler(e) {
        if (!e.target.classList || !e.target.classList.contains('aras-grid-freezer')) {
          return;
        }

        var ddline = this.ddline;
        var ddcontainer = this.ddcontainer;
        var startIndex = this.data.settings.frozenColumns;
        var freezerOffset = this.freezer.getBoundingClientRect();
        var containerOffset = this.dom.getBoundingClientRect();
        var startOffset = freezerOffset.left;
        var correctionOffset = e.pageX - startOffset;
        var dragLineClass = 'aras-grid-ddline_draggable-freezer';
        var dragFreezerClass = 'aras-grid-ddcontainer_draggable-freezer';
        var endIndex = startIndex;
        var ddLinePosition = freezerOffset.left;

        var mouseMoveHandler = function (e) {
          var _this3 = this;

          endIndex = 0;
          this.bodyBoundary.scrollLeft = 0;
          var positionX = e.pageX;
          var isRtlDirection = document.documentElement.dir === 'rtl';
          var offsetProperty = isRtlDirection ? 'right' : 'left';

          var nextEndIndex = function nextEndIndex(isRtlDirection, positionX, containerOffset) {
            var distanceFreezer = positionX - containerOffset.left;
            distanceFreezer = isRtlDirection ? _this3.dom.clientWidth - distanceFreezer : distanceFreezer;

            while (distanceFreezer >= _this3._getHeadWidth(endIndex) / 2) {
              distanceFreezer -= _this3._getHeadWidth(endIndex);
              endIndex++;
            }
          };

          nextEndIndex(isRtlDirection, positionX, containerOffset);
          ddline.classList.add(dragLineClass);
          ddcontainer.style.transform = 'translateX(' + (e.pageX - containerOffset[offsetProperty] - correctionOffset) + 'px)';
          var endHeadCell = this.header.querySelector('.aras-grid-head-cell[data-index="' + endIndex + '"]');

          if (!endHeadCell) {
            return;
          }

          var endHeadCellOffset = endHeadCell.getBoundingClientRect();

          if (isRtlDirection) {
            ddLinePosition = -(this.dom.clientWidth + containerOffset.left - endHeadCellOffset.left - this._getHeadWidth(endIndex)) + 1;
          } else {
            ddLinePosition = endHeadCellOffset.left - containerOffset.left - 2 - (this.data.settings.frozenColumns === endIndex ? 3 : 0);
          }

          ddline.style.transform = 'translateX(' + (ddLinePosition - 1) + 'px)';
        }.bind(this);

        var mouseUpHandler = function (e) {
          ddline.classList.remove(dragLineClass);
          ddcontainer.classList.remove(dragFreezerClass);
          document.removeEventListener('mousemove', mouseMoveHandler);
          document.removeEventListener('mouseup', mouseUpHandler);
          ddcontainer.style.transform = 'translateX(' + ddLinePosition - containerOffset.left + 'px)';

          if (!e.target || !e.target.closest || !e.target.closest('.aras-grid') || startIndex === endIndex) {
            this.render(this.data);
            return;
          }

          this.dom.dispatchEvent(new CustomEvent('freezeColumns', {
            detail: {
              frozenColumns: endIndex
            }
          }));
        }.bind(this);

        document.addEventListener('mousemove', mouseMoveHandler);
        document.addEventListener('mouseup', mouseUpHandler);
        ddcontainer.classList.add(dragFreezerClass);
        ddcontainer.style.width = '6px';
        ddcontainer.style.transform = 'translateX(' + (startOffset - containerOffset.left) + 'px)';
        e.preventDefault();
        e.stopPropagation();
      }
    }, {
      key: "_focusSearchCell",
      value: function _focusSearchCell() {
        var focusedCell = this.cache.focusedCell;

        if (!focusedCell || focusedCell.rowId !== 'searchRow') {
          return;
        }

        var headId = focusedCell.headId;
        var indexHead = this.data.settings.indexHead.indexOf(headId);

        if (this.focusTimeout) {
          clearTimeout(this.focusTimeout);
          this.focusTimeout = null;
        }

        this.focusTimeout = setTimeout(function () {
          var input = this.header.querySelector(".aras-grid-search-row-cell[data-index=\"".concat(indexHead, "\"] input"));

          if (input) {
            var inputBoundingBox = input.getBoundingClientRect();

            if (inputBoundingBox.left >= 0 && inputBoundingBox.right <= window.innerWidth) {
              input.focus();
            }
          }

          this.focusTimeout = null;
        }.bind(this), 100);
      }
    }, {
      key: "_render",
      value: function _render() {
        var frozenColumns = this.data.settings.frozenColumns;

        if (!this.cache) {
          var foundFirstHead = this._findFirstHead();

          this.cache = {
            firstHead: foundFirstHead,
            viewportTranslateX: this._getHeadRangeWidth(frozenColumns, foundFirstHead),
            prevScrollLeftPosition: this.bodyBoundary.scrollLeft,
            focusedCell: this.data.settings.focusedCell
          };
        }

        var disableXLazyRendering = this.defaultSettings.disableXLazyRendering;

        var firstRow = this._findFirstRow();

        var firstHead = disableXLazyRendering ? this.data.settings.frozenColumns : this.cache.firstHead;

        var rowsCount = this._getRowsCount();

        var headCount = this._getHeadCount(firstHead);

        var viewportTranslateX = disableXLazyRendering ? 0 : this.cache.viewportTranslateX;
        var viewportTranslateY = firstRow * this.defaultSettings.rowHeight;

        var viewportWidth = this._getHeadRangeWidth(firstHead, firstHead + headCount);

        var headForRender = this._getHeadForRender(firstHead, disableXLazyRendering ? this.data.settings.indexHead.length : headCount);

        var rowsForRender = this._getRowsForRender(firstRow, rowsCount);

        Inferno.render(this.templates.buildViewport(rowsForRender, headForRender, this._getViewportStyle(viewportTranslateX, viewportTranslateY, viewportWidth), this.defaultSettings, this.data), this.scroller);
        Inferno.render(this.templates.buildHead(headForRender, this._getHeadStyle(viewportTranslateX, viewportWidth), this.defaultSettings, this.data), this.headerBoundary);

        if (this.defaultSettings.freezableColumns) {
          var frozenViewportWidth = this._getHeadRangeWidth(0, frozenColumns);

          var frozenHeadForRender = this._getHeadForRender(0, frozenColumns);

          var bodyBoundary = this.bodyBoundary;
          Inferno.render(this.templates.buildViewport(frozenColumns ? rowsForRender : [], frozenHeadForRender, this._getViewportStyle(0, viewportTranslateY, frozenViewportWidth), this.defaultSettings, this.data), this.frozenScroller);
          Inferno.render(this.templates.buildHead(frozenHeadForRender, this._getHeadStyle(bodyBoundary.scrollLeft, frozenViewportWidth), this.defaultSettings, this.data), this.frozenHeaderBoundary);
          this.frozenBodyBoundary.scrollTop = bodyBoundary.scrollTop;
          this.frozenBodyBoundary.style.height = bodyBoundary.clientHeight + 'px';

          var _viewportWidth = document.documentElement.dir === 'rtl' ? -frozenViewportWidth : frozenViewportWidth;

          this.freezer.style.transform = 'translate3d(' + _viewportWidth + 'px, 0, 0)';
        }
      }
    }, {
      key: "render",
      value: function render(grid) {
        if (this.debounceTimeout) {
          return this.debounceTimeout;
        }

        this.debounceTimeout = new Promise(function (resolve) {
          setTimeout(function () {
            this.data = grid;
            var prevFocusedCell = this.cache && this.cache.focusedCell;
            this.cache = null;
            var freezableColumns = this.defaultSettings.freezableColumns;

            if (!this.data.head || !this.data.head._store.size) {
              this.debounceTimeout = false;
              return resolve();
            }

            if (!this.body.parentNode) {
              this.dom.appendChild(this.header);
              this.dom.appendChild(this.body);
              this.dom.appendChild(this.resizeLine);
              this.dom.appendChild(this.ddcontainer);
              this.dom.appendChild(this.ddline);

              if (freezableColumns) {
                this.dom.appendChild(this.freezer);
              }

              this._addHandlers();
            }

            this._setScrollSize();

            this._render();

            if (!this.activeCell.parentNode) {
              this.scroller.appendChild(this.activeCell);
            }

            if (freezableColumns && !this.frozenActiveCell.parentNode) {
              this.frozenScroller.appendChild(this.frozenActiveCell);
            }

            var focusedCell = this.cache.focusedCell;

            if (focusedCell && prevFocusedCell !== focusedCell) {
              if (this.data.settings.indexHead.length > 1) {
                var indexHead = this.data.settings.indexHead.indexOf(focusedCell.headId);

                this._scrollToHead(indexHead);
              }

              if (focusedCell.rowId !== 'searchRow') {
                var indexRow = this.data.settings.indexRows.indexOf(focusedCell.rowId);

                this._scrollToRow(indexRow);
              }
            }

            this._renderActiveCell(prevFocusedCell || {});

            this._focusSearchCell();

            this.debounceTimeout = false;
            resolve();
          }.bind(this), 0);
        }.bind(this));
        return this.debounceTimeout;
      }
    }, {
      key: "showMessageActiveCell",
      value: function showMessageActiveCell() {
        var message = this.data.settings.focusedCell ? this.data.settings.focusedCell.toolTipMessage : '';
        var activeCell = this.activeCell;

        if (!message) {
          var dataShowtoolTip = activeCell.getAttribute('data-tooltip-show');

          if (dataShowtoolTip !== 'true') {
            return;
          }

          if (activeCell.firstChild) {
            activeCell.firstChild.classList.remove('aras-form-input_invalid');
          }

          activeCell.classList.remove('aras-grid-active-cell_alert', 'aras-tooltip');
          activeCell.setAttribute('data-tooltip-show', false);
          return;
        }

        var tooltipPosition = getTooltipPosition(activeCell, this.body, message);

        if (activeCell.firstChild) {
          activeCell.firstChild.classList.add('aras-form-input_invalid');
        }

        activeCell.classList.add('aras-grid-active-cell_alert', 'aras-tooltip');
        activeCell.setAttribute('data-tooltip-show', true);
        activeCell.setAttribute('data-tooltip', message);
        activeCell.setAttribute('data-tooltip-pos', tooltipPosition);
      }
    }, {
      key: "scrollableElement",
      get: function get() {
        return this.bodyBoundary;
      }
    }]);

    return GridView;
  }();

  function Keyboard(grid) {
    this.grid = grid;
    this.grid.dom.addEventListener('keydown', this._keydownHandler.bind(this));
  }

  Keyboard.prototype = {
    constructor: Keyboard,
    _dispatchFocusEvent: function _dispatchFocusEvent(indexHead, indexRow, forceEdit) {
      this.grid.dom.dispatchEvent(new CustomEvent('focusCell', {
        detail: {
          indexRow: indexRow,
          indexHead: indexHead,
          forceEdit: forceEdit
        }
      }));
    },
    _dispatchSearchEvent: function _dispatchSearchEvent() {
      this.grid.view.body.focus();
      this.grid.dom.dispatchEvent(new CustomEvent('focusCell'));
      this.grid.dom.dispatchEvent(new CustomEvent('search'));
    },
    _dispatchSelectEvent: function _dispatchSelectEvent(indexRow, event) {
      var type = !this.grid.view.defaultSettings.multiSelect ? 'single' : event.ctrlKey || event.metaKey ? 'ctrl' : event.shiftKey ? 'shift' : 'single';
      this.grid.dom.dispatchEvent(new CustomEvent('selectRow', {
        detail: {
          index: indexRow,
          type: type
        }
      }));
    },
    _dispatchSelectAllEvent: function _dispatchSelectAllEvent(event) {
      if (!this.grid.view.defaultSettings.multiSelect) {
        return;
      }

      this.grid.dom.dispatchEvent(new CustomEvent('selectRow', {
        detail: {
          type: 'all'
        }
      }));
    },
    _dispatchCancelEditEvent: function _dispatchCancelEditEvent() {
      this.grid.dom.dispatchEvent(new CustomEvent('cancelEdit'));
    },
    _keydownHandler: function _keydownHandler(event) {
      var focusedCell = this.grid.settings.focusedCell;

      if (!focusedCell || event.isComposing) {
        return;
      }

      var rowId = focusedCell.rowId;
      var headId = focusedCell.headId;
      var indexRow = this.grid.settings.indexRows.indexOf(rowId);
      var indexHead = this.grid.settings.indexHead.indexOf(headId);
      var rowsCount = this.grid.settings.indexRows.length - 1;
      var gridView = this.grid.view;
      var visibleRowCount = gridView.bodyBoundary.clientHeight / gridView.defaultSettings.rowHeight | 0;
      var firstRowIndex = gridView.bodyBoundary.scrollTop / gridView.defaultSettings.rowHeight | 0;
      var searchRowCell = event.target.closest('.aras-grid-search-row-cell');

      if (searchRowCell || rowId === 'searchRow') {
        switch (event.code || event.keyCode) {
          case 'Enter':
          case 'NumpadEnter':
          case 13:
            {
              this._dispatchSearchEvent();

              break;
            }

          case 'Tab':
          case 9:
            {
              if (indexHead <= 1 && event.shiftKey || rowsCount === -1 && indexHead === this.grid.settings.indexHead.length - 1 && !event.shiftKey) {
                return;
              }

              event.preventDefault();
              var step = event.shiftKey ? -1 : 1;
              var nextHeadType;

              do {
                var nextHeadId = this.grid.settings.indexHead[indexHead + step];

                if (!nextHeadId) {
                  this._dispatchFocusEvent(0, 0, true);

                  return;
                }

                var nextHead = this.grid.head.get(nextHeadId);
                nextHeadType = nextHead.searchType;
                indexHead += step;
              } while (nextHeadType === 'disabled');

              if (indexHead < 0 || indexHead === this.grid.settings.indexHead.length) {
                return;
              }

              this._dispatchFocusEvent(indexHead, 'searchRow');

              break;
            }
        }

        return;
      }

      switch (event.code || event.keyCode) {
        case 'Enter':
        case 'NumpadEnter':
        case 13:
          {
            this._dispatchFocusEvent(indexHead, indexRow);

            break;
          }

        case 'Tab':
        case 9:
          {
            var lastHead = indexHead === this.grid.settings.indexHead.length - 1;
            var firstHead = indexHead === 0;
            var lastRow = indexRow === this.grid.settings.indexRows.length - 1;
            var firstRow = indexRow === 0;

            if (lastHead && lastRow && !event.shiftKey) {
              return;
            }

            if (firstHead && firstRow && event.shiftKey) {
              this._dispatchFocusEvent(this.grid.settings.indexHead.length - 1, 'searchRow');

              event.preventDefault();
              break;
            }

            if (event.shiftKey) {
              indexRow = firstHead ? --indexRow : indexRow;
              indexHead = firstHead ? this.grid.settings.indexHead.length - 1 : --indexHead;

              if (firstHead) {
                this.grid.dom.dispatchEvent(new CustomEvent('selectRow', {
                  detail: {
                    index: indexRow,
                    type: 'single'
                  }
                }));
              }
            } else {
              indexRow = lastHead ? ++indexRow : indexRow;
              indexHead = lastHead ? 0 : ++indexHead;

              if (lastHead) {
                this._dispatchSelectEvent(indexRow, event);
              }
            }

            this._dispatchFocusEvent(indexHead, indexRow, true);

            event.preventDefault();
            break;
          }

        case 'Escape':
        case 27:
          {
            if (focusedCell.editing) {
              this._dispatchCancelEditEvent();
            }

            break;
          }
      }

      if (event.target.closest('.aras-grid-active-cell')) {
        return;
      }

      switch (event.code || event.keyCode) {
        case 'Home':
        case 'Numpad7':
        case 36:
          {
            if (event.ctrlKey || event.metaKey) {
              indexRow = 0;
            }

            indexHead = 0;

            this._dispatchFocusEvent(indexHead, indexRow);

            break;
          }

        case 'End':
        case 'Numpad1':
        case 35:
          {
            if (event.ctrlKey || event.metaKey) {
              indexRow = rowsCount;
            }

            indexHead = this.grid.settings.indexHead.length - 1;

            this._dispatchFocusEvent(indexHead, indexRow);

            break;
          }

        case 'PageDown':
        case 'Numpad3':
        case 34:
          {
            var nextFirstRow = firstRowIndex + visibleRowCount;
            var cellTopPosition = nextFirstRow * gridView.defaultSettings.rowHeight;
            gridView.bodyBoundary.scrollTop = cellTopPosition;

            if (indexRow < firstRowIndex || indexRow >= nextFirstRow) {
              indexRow = firstRowIndex;
            }

            var newFocusedIndexRow = indexRow + visibleRowCount;

            if (indexRow < rowsCount) {
              this._dispatchFocusEvent(indexHead, Math.min(newFocusedIndexRow, rowsCount));
            }

            break;
          }

        case 'PageUp':
        case 'Numpad9':
        case 33:
          {
            var _nextFirstRow = firstRowIndex - visibleRowCount;

            var _cellTopPosition = _nextFirstRow * gridView.defaultSettings.rowHeight;

            gridView.bodyBoundary.scrollTop = _cellTopPosition;

            var _newFocusedIndexRow = indexRow > firstRowIndex + visibleRowCount ? _nextFirstRow : indexRow - visibleRowCount;

            if (indexRow > 0) {
              this._dispatchFocusEvent(indexHead, Math.max(0, _newFocusedIndexRow));
            }

            break;
          }

        case 'ArrowUp':
        case 'Numpad8':
        case 38:
          {
            if (indexRow > 0) {
              this._dispatchFocusEvent(indexHead, --indexRow);
            }

            break;
          }

        case 'ArrowDown':
        case 'Numpad2':
        case 40:
          {
            if (indexRow < this.grid.settings.indexRows.length - 1) {
              this._dispatchFocusEvent(indexHead, ++indexRow);
            }

            break;
          }

        case 'ArrowLeft':
        case 'Numpad4':
        case 37:
          {
            if (indexHead > 0) {
              this._dispatchFocusEvent(--indexHead, indexRow);
            }

            break;
          }

        case 'ArrowRight':
        case 'Numpad6':
        case 39:
          {
            if (indexHead < this.grid.settings.indexHead.length - 1) {
              this._dispatchFocusEvent(++indexHead, indexRow);
            }

            break;
          }

        case 'Space':
        case 32:
          {
            this._dispatchSelectEvent(indexRow, event);

            break;
          }

        case 'KeyA':
        case 65:
          {
            if (event.ctrlKey || event.metaKey) {
              this._dispatchSelectAllEvent(event);
            }

            break;
          }

        default:
          return;
      }

      event.preventDefault();
    }
  };

  var compareValues = function compareValues(valueA, valueB, reverse) {
    var isUndefinedA = valueA === null || valueA === undefined;
    var isUndefinedB = valueB === null || valueB === undefined;

    if (isUndefinedA && isUndefinedB) {
      return 0;
    } else if (isUndefinedA) {
      return reverse ? 1 : -1;
    } else if (isUndefinedB) {
      return reverse ? -1 : 1;
    }

    if (valueA < valueB) {
      return reverse ? 1 : -1;
    }

    if (valueA > valueB) {
      return reverse ? -1 : 1;
    }

    return 0;
  };

  var compareChapter = function compareChapter(valueA, valueB, reverse) {
    if (valueA.length > valueB.length) {
      return -compareChapter(valueB, valueA, reverse);
    }

    for (var i = 0; i < valueA.length; i++) {
      var result = compareValues(parseInt(valueA[i], 10), parseInt(valueB[i], 10), reverse);

      if (result !== 0) {
        return result;
      }
    }

    return valueA.length === valueB.length ? 0 : -1;
  };

  var dataTypeSorters = {
    defaultSorter: function defaultSorter(headId, valuesMap, metadata, grid) {
      return function (rowA, rowB, reverse) {
        return compareValues(valuesMap.get(rowA), valuesMap.get(rowB), reverse);
      };
    },
    date: function date(headId, valuesMap, metadata, grid) {
      var convertedValuesMap = new Map();
      valuesMap.forEach(function (value, rowId) {
        convertedValuesMap.set(rowId, value ? intl.date.parse(value).getTime() : null);
      });
      return function (rowA, rowB, reverse) {
        return compareValues(convertedValuesMap.get(rowA), convertedValuesMap.get(rowB), reverse);
      };
    },
    ubigint: function ubigint(headId, valuesMap, metadata, grid) {
      var convertedValuesMap = new Map();
      valuesMap.forEach(function (value, rowId) {
        convertedValuesMap.set(rowId, value ? bigInt(value) : null);
      });
      return function (rowA, rowB, reverse) {
        var valueA = convertedValuesMap.get(rowA);
        var valueB = convertedValuesMap.get(rowB);

        if (valueA && valueB) {
          var result = valueA.compare(valueB);

          if (result !== 0) {
            return reverse ? -1 * result : result;
          }

          return 0;
        }

        return compareValues(valueA, valueB, reverse);
      };
    },
    decimal: function decimal(headId, valuesMap, metadata, grid) {
      var convertedValuesMap = new Map();
      valuesMap.forEach(function (value, rowId) {
        convertedValuesMap.set(rowId, value ? parseFloat(value) : null);
      });
      return function (rowA, rowB, reverse) {
        return compareValues(convertedValuesMap.get(rowA), convertedValuesMap.get(rowB), reverse);
      };
    },
    chapter: function chapter(headId, valuesMap, metadata, grid) {
      return function (rowA, rowB, reverse) {
        return compareChapter(valuesMap.get(rowA).split('.'), valuesMap.get(rowB).split('.'), reverse);
      };
    }
  };
  dataTypeSorters.global_version = dataTypeSorters.ubigint;
  function getDataTypeSorter(dataType) {
    return dataTypeSorters[dataType] || dataTypeSorters.defaultSorter;
  }

  /**
   * Grid Component
   *
   * @class
   * @name Grid
   * @param {object}   dom Dom Element used as container
   * @param {object} options
   * @param {boolean} [options.multiSelect=true] options.multiSelect - enable/disable multi select
   * @param {boolean} [options.resizable=true] options.resizable - enable/disable resize of columns
   * @param {boolean} [options.search=false] options.search - show/hide simple search
   * @param {boolean} [options.editable=false] options.editable - enable/disable edit cell
   * @param {boolean} [options.sortable=true] options.sortable - enable/disable sort columns
   * @param {boolean} [options.freezableColumns=false] options.freezableColumns - enable/disable freeze of columns
   *
   * @property {Map<string, object>} head - Data of heads grid which store in Grid. Returns wrapper on Map on get method for calls render grid after any changes.
   * @property {string} key - unique column identificator.
   * @property {object} headObject
   * @property {string} headObject.name - link on property value from grid rows data.
   * @property {string} headObject.linkProperty - name of property that refers to data from grid rows.
   *
   * @property {Map} rows - Data of rows grid which store in Grid. Returns wrapper on Map on get method for calls render grid after any changes.
   *
   * @property {object} settings - grid state
   * @property {number} settings.frozenColumns - amount of frozen columns
   * @property {string[]} settings.selectedRows - ids of selected rows
   * @property {{headId: string, rowId: string, editing: boolean}} settings.focusedCell - focus cell object
   * @property {{headId: string, desc: boolean}[]} settings.orderBy - sortable heads array
   */

  var Grid =
  /*#__PURE__*/
  function () {
    function Grid(dom, options) {
      _classCallCheck(this, Grid);

      this.eventCallbacks = new WeakMap();
      var self = this;
      this.dom = dom;
      this.settings = {
        frozenColumns: 0,
        indexHead: [],
        indexRows: [],
        selectedRows: [],

        get focusedCell() {
          return this._focusedCell;
        },

        set focusedCell(next) {
          var _this = this;

          var prev = this._focusedCell;

          if (prev === next) {
            return self.view.showMessageActiveCell();
          }

          var setNextFocusedCell = function setNextFocusedCell() {
            _this._focusedCell = next;

            if (next && next.editing) {
              _this._focusedCell.editing = false;
              var rowId = next.rowId;
              var headId = next.headId;
              var value = self.rows.get(rowId)[headId];

              var type = self._getEditorType(headId, rowId, value, self);

              next.editing = self.view.defaultSettings.editable && self.checkEditAvailability(next.headId, next.rowId, self) && type !== 'nonEditable';
            }
          };

          if (prev && prev.editing) {
            var applyEdit = function applyEdit(value) {
              var linkProperty = self.head.get(prev.headId, 'linkProperty');
              var propName = self.head.get(prev.headId, 'name') || prev.headId;
              var dataId = linkProperty && self.rows.get(prev.rowId, linkProperty) || prev.rowId;
              self.dom.dispatchEvent(new CustomEvent('applyEdit', {
                detail: {
                  headId: prev.headId,
                  rowId: prev.rowId,
                  value: value,
                  dataId: dataId,
                  propName: propName
                }
              }));
              setNextFocusedCell();
            };

            var validatorResult = self.view.validator();

            if (!validatorResult.willValidate) {
              applyEdit(validatorResult.value);
            } else {
              validatorResult.willValidate(validatorResult.value).then(applyEdit).catch(function (error) {
                var showTooltip = !error.name || error.name !== 'ComponentValidationError';
                self.dom.dispatchEvent(new CustomEvent('notValidEdit', {
                  detail: {
                    headId: prev.headId,
                    rowId: prev.rowId,
                    message: showTooltip && error,
                    value: self.view.validator().value
                  }
                }));
              });
            }

            return;
          }

          setNextFocusedCell();
          self.render();
        },

        get orderBy() {
          return this._orderBy ? this._orderBy.slice() : [];
        },

        set orderBy(next) {
          this._orderBy = next;
          self.sort().then(self.render.bind(self));
        }

      };
      this.initialization(options);
    }
    /**
     * The first initialization of Grid.
     * Create view, action, keyboard classes and set options
     *
     * @protected
     * @param {object} options Options object from Grid constructor
     */


    _createClass(Grid, [{
      key: "initialization",
      value: function initialization(options) {
        this.view = new GridView(this.dom, options);
        this.actions = new GridActions(this);
        this.keyboard = new Keyboard(this);
      }
    }, {
      key: "_getNativeCellType",

      /**
       * Private method of get cell type for formatter
       *
       * @private
       * @param   {string} headId - Head id
       * @param   {string} itemId - Id of an item which the cell belongs to. Is used as a key in rows store. Could be different from rowId, if item has a linkProperty pointing to another item
       * @param   {*} value - Cell value
       * @returns {string} - return a type of Cell
       */
      value: function _getNativeCellType(headId, itemId, value) {
        var type = 'text';

        if (typeof value === 'boolean') {
          type = 'boolean';
        }

        return type;
      }
      /**
       * Method which calls public getCellType method or private if the return getCellType is empty
       *
       * @private
       * @param   {string} headId - Head id
       * @param   {string} itemId - Id of an item which the cell belongs to. Is used as a key in rows store. Could be different from rowId, if item has a linkProperty pointing to another item
       * @param   {*} value - Cell value
       * @param   {Grid} grid - Grid instance
       * @param   {string} rowId - Id of a row (id of an item that is considered "main" for the row)
       * @returns {string} - return a type of Cell
       */

    }, {
      key: "_getCellType",
      value: function _getCellType(headId, itemId, value, grid, rowId) {
        var nativeType = this._getNativeCellType(headId, itemId, value);

        return this.getCellType(headId, itemId, value, nativeType, rowId) || nativeType;
      }
      /**
       * Handler which get cell Type for call special formatter
       *
       * @public
       * @param   {string} headId - Head id
       * @param   {string} itemId - Id of an item which the cell belongs to. Is used as a key in rows store. Could be different from rowId, if item has a linkProperty pointing to another item
       * @param   {*} value - Cell value
       * @param   {string} type - a type which calculated by grid
       * @param   {string} rowId - Id of a row (id of an item that is considered "main" for the row)
       * @returns {string} - return a type of Cell
       */

    }, {
      key: "getCellType",
      value: function getCellType(headId, itemId, value, type, rowId) {
        return type;
      }
      /**
       * Handler which get cell Styles
       *
       * @public
       * @param   {string} headId - Head id
       * @param   {string} itemId - Id of an item which the cell belongs to. Is used as a key in rows store. Could be different from rowId, if item has a linkProperty pointing to another item
       * @returns {Object} - return a styles of Cell
       */

    }, {
      key: "getCellStyles",
      value: function getCellStyles(headId, itemId) {
        return {};
      }
      /**
       * Grid method which calculate a edit type cell for calls special editor
       *
       * @private
       * @param   {string} headId - Head id
       * @param   {string} itemId - Id of an item which the cell belongs to. Is used as a key in rows store. Could be different from rowId, if item has a linkProperty pointing to another item
       * @param   {*} value - Cell value
       * @param   {Grid} grid - Grid instance
       * @param   {string} rowId - Id of a row (id of an item that is considered "main" for the row)
       * @returns {string} - return a type of Cell
       */

    }, {
      key: "_getEditorType",
      value: function _getEditorType(headId, itemId, value, grid, rowId) {
        var type = this._getCellType(headId, itemId, value, grid, rowId);

        if (type === 'boolean' || type === 'file') {
          return 'nonEditable';
        }

        return this.getEditorType(headId, itemId, value, type, rowId) || type;
      }
      /**
       * Handler which get cell Type for call special editor
       * By default calls getCellType
       *
       * @public
       * @param   {string} headId - Head id
       * @param   {string} itemId - Id of an item which the cell belongs to. Is used as a key in rows store. Could be different from rowId, if item has a linkProperty pointing to another item
       * @param   {*} value - Cell value
       * @param   {string} type - a type which calculated by grid
       * @param   {string} rowId - Id of a row (id of an item that is considered "main" for the row)
       * @returns {string} - return a type of Cell
       */

    }, {
      key: "getEditorType",
      value: function getEditorType(headId, itemId, value, type, rowId) {
        return type;
      }
      /**
       * Handler which check a editable of a Cell
       *
       * @public
       * @param   {string} headId - Head id
       * @param   {string} itemId - Id of an item which the cell belongs to. Is used as a key in rows store. Could be different from rowId, if item has a linkProperty pointing to another item
       * @param   {Grid} grid - instance of Grid
       * @returns {boolean} - can a cell be edited or not
       */

    }, {
      key: "checkEditAvailability",
      value: function checkEditAvailability(headId, itemId, grid) {
        return true;
      }
      /**
       * Handler which calculating metadata for a cell
       * By default returns null
       *
       * @public
       * @param   {string} headId - Head id
       * @param   {string} itemId - Id of an item which the cell belongs to. Is used as a key in rows store. Could be different from rowId, if item has a linkProperty pointing to another item
       * @param   {string} type - Cell type which was calculated by grid
       * @returns {?Object} - metadata object for editors or formatters
       */

    }, {
      key: "getCellMetadata",
      value: function getCellMetadata(headId, itemId, type) {
        return null;
      }
      /**
       * Standard logic of sorting
       *
       * @private
       * @param   {{string}[]} sortableArray - array of row ids
       * @returns {Promise} - the end of operation
       */

    }, {
      key: "_sort",
      value: function () {
        var _sort2 = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee(sortableArray) {
          var _this2 = this;

          var orderBy, sortHandlers;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  orderBy = this.settings.orderBy;
                  sortHandlers = orderBy.reduce(function (map, sortInfo) {
                    var headId = sortInfo.headId;
                    var dataType = headId === 'chapter_D' ? 'chapter' : _this2.head.get(headId, 'dataType');

                    var linkProperty = _this2.head.get(headId, 'linkProperty');

                    var propertyName = _this2.head.get(headId, 'name') || headId;
                    var valuesMap = sortableArray.reduce(function (map, rowId) {
                      if (linkProperty) {
                        rowId = _this2.rows.get(rowId, linkProperty);
                      }

                      return map.set(rowId, _this2.rows.get(rowId, propertyName));
                    }, new Map());
                    var sorter = getDataTypeSorter(dataType);

                    var metadata = _this2.getCellMetadata(headId, sortableArray[0], dataType);

                    return map.set(headId, sorter(headId, valuesMap, metadata, _this2));
                  }, new Map());
                  sortableArray.sort(function (a, b) {
                    var firstSortedRow;
                    var secondSortedRow;

                    for (var i = 0; i < orderBy.length; i++) {
                      firstSortedRow = a;
                      secondSortedRow = b;
                      var headId = orderBy[i].headId;
                      var reverse = orderBy[i].desc;

                      var linkProperty = _this2.head.get(headId, 'linkProperty');

                      if (linkProperty) {
                        firstSortedRow = _this2.rows.get(a, linkProperty);
                        secondSortedRow = _this2.rows.get(b, linkProperty);
                      }

                      var result = sortHandlers.get(headId)(firstSortedRow, secondSortedRow, reverse);

                      if (result !== 0) {
                        return result;
                      }
                    }

                    return 0;
                  });

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function _sort(_x) {
          return _sort2.apply(this, arguments);
        }

        return _sort;
      }()
      /**
       * Standard logic of sorting
       *
       * @public
       * @returns {Promise} - the end of operation
       */

    }, {
      key: "sort",
      value: function sort() {
        return this._sort(this.settings.indexRows);
      }
      /**
       * Cancel edit operation
       *
       * @public
       */

    }, {
      key: "cancelEdit",
      value: function cancelEdit() {
        if (!this.settings._focusedCell) {
          return;
        }

        this.settings._focusedCell = Object.assign({}, this.settings._focusedCell, {
          editing: false,
          valid: true,
          toolTipMessage: ''
        });
        this.view.showMessageActiveCell();
        this.render();
      }
      /**
       * Handler which return a css class name of Row
       *
       * @public
       * @param   {string} rowId - id of Row
       * @returns {string} - CSS class name
       */

    }, {
      key: "getRowClasses",
      value: function getRowClasses(rowId) {
        return '';
      }
      /**
       * Start render of Grid
       *
       * @public
       * @returns {Promise} - end of operation
       */

    }, {
      key: "render",
      value: function render() {
        return this.view.render(this);
      }
      /**
       * Resize column event
       *
       * @event resizeHead
       * @type {object}
       * @property {number} index - index a head
       */

      /**
       * Select row event
       *
       * @event selectRow
       * @type {object}
       * @property {number} index - index a row
       */

      /**
       * Focus Cell event. If detail is null it is mean out focus
       *
       * @event focusCell
       * @type {object}
       * @property {number} indexHead - index a head
       * @property {number} indexRow - index a row
       */

      /**
       * Apply editing value in Grid
       *
       * @event applyEdit
       * @type {object}
       * @property {string} rowId - row id
       * @property {string} headId - head id
       * @property {*} value - new value
       */

      /**
       * Cancel edit in Grid
       *
       * @event cancelEdit
       * @type {object}
       */

      /**
       * Drag and drop column
       *
       * @event moveHead
       * @type {object}
       * @property {number} startIndex - index a head from
       * @property {number} endIndex - index a head to
       */

      /**
       * Sorting event
       *
       * @event sort
       * @type {object}
       * @property {number} index - index a head
       * @property {boolean} ctrlKey - ctrlKey is pressed for multi sorting
       */

      /**
       * Add listener for operation
       *
       * @public
       * @param   {string} type - type of event
       * @param   {function(headId, rowId, event)} callback - callback on event
       * @param   {string} element  - 'row' or 'cell' or 'head' for native dom event only
       */

    }, {
      key: "on",
      value: function on(type, callback, element) {
        if (!element) {
          return this.dom.addEventListener(type, callback);
        }

        var callbackFunc = function (e) {
          var params = getCallbackParams(this, e.target, element);

          if (params && params.type === element) {
            callback.apply(this, params.ids.concat(e));
          }
        }.bind(this);

        this.eventCallbacks.set(callback, callbackFunc);
        this.dom.addEventListener(type, callbackFunc);
      }
      /**
       * Remove listener for operation
       *
       * @public
       * @param {string} type - event type
       * @param {function(event, headId, rowId)} callback - callback function
       */

    }, {
      key: "off",
      value: function off(type, callback) {
        this.dom.removeEventListener(type, this.eventCallbacks.get(callback) || callback);

        if (this.eventCallbacks.has(callback)) {
          this.eventCallbacks.delete(callback);
        }
      }
    }, {
      key: "head",
      get: function get() {
        return this._head;
      },
      set: function set(value) {
        this._head = new HeadWrap(value, this);
        var array = [];
        value.forEach(function (val, id) {
          array.push(id);
        });
        this.settings.indexHead = array;
        this.render();
      }
    }, {
      key: "rows",
      get: function get() {
        return this._rows;
      },
      set: function set(value) {
        this._rows = new RowsWrap(value, this);
        var array = [];
        value.forEach(function (val, id) {
          array.push(id);
        });
        this.settings.indexRows = array;
        this.render();
      }
    }]);

    return Grid;
  }();

  function getCallbackParams(gridInstance, node, type) {
    var headId;
    var cell = node.closest('th.aras-grid-head-cell') || node.closest('td.aras-grid-row-cell');
    var focusedCell = gridInstance.settings.focusedCell;

    if (node.closest('.aras-grid-active-cell') && focusedCell) {
      return {
        ids: [focusedCell.headId, focusedCell.rowId],
        type: 'cell'
      };
    }

    if (cell) {
      if (cell.dataset.index !== undefined) {
        headId = gridInstance.settings.indexHead[cell.dataset.index];
        return {
          ids: [headId],
          type: 'head'
        };
      }

      var frozen = cell.closest('.aras-grid-body-boundary_frozen');
      var frozenClassName = '.aras-grid-header-boundary_frozen';
      var selector = frozen ? "".concat(frozenClassName, " ") : ":not(".concat(frozenClassName, ") > ");
      var headGrid = gridInstance.dom.querySelector(selector + '.aras-grid-head');
      var headCell = headGrid.children[0].children[cell.cellIndex];
      headId = gridInstance.settings.indexHead[headCell.dataset.index];
    }

    var row = node.closest('tr.aras-grid-row');

    if (!row) {
      return;
    }

    var rowId = gridInstance.settings.indexRows[row.dataset.index];
    var isRowAndCell = type !== 'row' && headId !== undefined;
    return {
      ids: isRowAndCell ? [headId, rowId] : [rowId],
      type: isRowAndCell ? 'cell' : 'row'
    };
  }

  gridFormatters.extend(dataTypeFormatters);
  window.Grid = Grid;
  window.Grid.formatters = gridFormatters;

}(Inferno));
//# sourceMappingURL=contentGrid.js.map
