<AML>
 <Item type="Method" id="35018C71947F4FFE9832DA90833375F1" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[			IDataAccessLayer dataAccessLayer = new DataAccessLayer(this.getInnovator(), CCO);
			BusinessLogic businessLogic = new BusinessLogic(dataAccessLayer);
			return businessLogic.Run(this);
}

		//[PartialPath("DAL/DataAccessLayer")]
		internal class BusinessLogic
		{
			private const string GagNewItemPropertyName = "gag_new_item";
			private const string GagActionPropertyName = "gag_action";
			private const string RelatedIdPropertyName = "related_id";

			private const string PolyItemTypeName = "GAG_GrammerChangeControlled";
			private const string AffectedItemTypeName = "GAG_GECO ChangeControlled";

			private readonly IDataAccessLayer _dal;

			public BusinessLogic(IDataAccessLayer dataAccessLayer)
			{
				_dal = dataAccessLayer;
			}

			public Item Run(Item contextItem)
			{
				IEnumerable<string> gecoIds = contextItem.getAttribute("idlist").Split(',');
				foreach (string gecoId in gecoIds)
				{
					IEnumerable<Item> affectedItems = GetAffectedItem(gecoId)
						.Where(x => x.getProperty(GagActionPropertyName) != "None" && !string.IsNullOrWhiteSpace(x.getProperty(GagActionPropertyName)))
						.Select(x => x.getPropertyItem(GagNewItemPropertyName) ?? x.getRelatedItem())
						.ToArray();

					if (!affectedItems.Any())
					{
						continue;
					}

					ChangeFlag(affectedItems);
				}

				return contextItem;
			}

			private void ChangeFlag(IEnumerable<Item> affectedItems)
			{
				var editAmlRequest = new StringBuilder();
				foreach (Item affectedItem in affectedItems)
				{
					string itemTypeDbName = _dal.GenerateTableName(affectedItem.getType());
					string itemID = affectedItem.getID();
					editAmlRequest.AppendLine($"exec update_has_change_pending_flag '{itemTypeDbName}','{itemID}',''");
				}

				Item result = _dal.ApplySql(editAmlRequest.ToString());
				Contract.ThrowIfError(result);
			}

			private IEnumerable<Item> GetAffectedItem(string gecoId)
			{
				Item affectedItems = _dal.NewItem(AffectedItemTypeName, "get");
				affectedItems.setProperty("source_id", gecoId);
				affectedItems.setAttribute("select", $"{RelatedIdPropertyName}, {GagNewItemPropertyName}, {GagActionPropertyName}");
				Item newItem = affectedItems.createPropertyItem(GagNewItemPropertyName, PolyItemTypeName, "get");
				newItem.setAttribute("select", "id");
				affectedItems = _dal.ApplyItem(affectedItems);
				if (affectedItems.isEmpty())
				{
					return Array.Empty<Item>();
				}

				Contract.ThrowIfError(affectedItems);
				return affectedItems.Enumerate();
			}
		}

		//[PartialPath("DAL/DataAccessLayer")]
		internal class DataAccessLayer : Aras.Common.DataAccessLayer, IDataAccessLayer
		{
			public DataAccessLayer(Innovator innovator, Aras.Server.Core.CallContext cco) :
				base(innovator, cco)
			{ }

			public string GenerateTableName(string itemTypeName)
			{
				return CallContext.DB.GenerateTableName(itemTypeName);
			}
		}

		//[PartialPath("BusinessLogic/DAL")]
		internal interface IDataAccessLayer : Aras.Common.IDataAccessLayer
		{
			string GenerateTableName(string itemTypeName);]]></method_code>
  <method_type>C#</method_type>
  <name>GAG_UpdateChangesPending</name>
 </Item>
</AML>