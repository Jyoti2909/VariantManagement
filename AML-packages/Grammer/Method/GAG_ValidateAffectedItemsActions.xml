<AML>
 <Item type="Method" id="85EC2993AA4244B7900B43C049EF6B5C" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[			var dal = new DataAccessLayer(this.getInnovator(), CCO);
			BusinessLogic businessLogic = new BusinessLogic(dal);
			businessLogic.Run(this);

			return this;

	}

		//[PartialPath("BusinessLogic/BusinessLogic")]
		internal class BusinessLogic
		{
			private readonly DataAccessLayer _dal;

			public BusinessLogic(DataAccessLayer dataAccessLayer)
			{
				_dal = dataAccessLayer;
			}

			public void Run(Item contextItem)
			{
				string activityId = contextItem.getID();
				Item geco = GetGECOByActivityId(activityId);
				string classification = geco.getProperty("classification");
				ActionValidator actionValidator = GetActionValidator(classification);
				Item changeControlledItems = GetGECOChangeControlled(geco.getID());
				List<AffectedItem> affectedItems = GetAffectedItemDtos(changeControlledItems);
				actionValidator.ValidateActions(affectedItems);
			}

			protected Item GetGECOByActivityId(string activityId)
			{
				Item geco = _dal.NewItem("Activity", "GAG_GetGecoByActivity");
				geco.setProperty("additional_properties", "classification");
				geco.setID(activityId);
				geco = _dal.ApplyItem(geco);

				return geco.isError() ? throw new ItemException(geco) : geco;
			}

			protected Item GetGECOChangeControlled(string gecoId)
			{
				Item gecoChangeControlledItem = _dal.NewItem("GAG_GECO ChangeControlled", "get");
				gecoChangeControlledItem.setProperty("source_id", gecoId);
				gecoChangeControlledItem.setAttribute("select", "related_id(item_number, state), gag_action");
				gecoChangeControlledItem = _dal.ApplyItem(gecoChangeControlledItem);
				return gecoChangeControlledItem.isError()
					? throw new ItemException(gecoChangeControlledItem)
					: gecoChangeControlledItem;
			}

			private static ActionValidator GetActionValidator(string classification)
			{
				switch (classification)
				{
					case "Pre-Release & Change/CAD Document":
						return new PreReleaseActionValidator("CAD");
					case "Release & Change/CAD Document":
						return new ReleaseActionValidator("CAD");
					case "Pre-Release & Change/Mechanical Part":
						return new PreReleaseActionValidator("Part");
					case "Release & Change/Mechanical Part":
						return new ReleaseActionValidator("Part");
					default:
						throw new ArgumentException($"Unknown {classification} classification.");
				}
			}

			private static List<AffectedItem> GetAffectedItemDtos(Item changeControlledItems)
			{
				List<AffectedItem> result = new List<AffectedItem>();

				foreach (Item changeControlledItem in changeControlledItems.Enumerate())
				{
					Item relatedItem = changeControlledItem.getRelatedItem();
					var affectedItem = new AffectedItem
					{
						Action = changeControlledItem.getProperty("gag_action"),
						State = relatedItem.getProperty("state"),
						Number = relatedItem.getProperty("item_number"),
						ItemType = relatedItem.getType()
					};

					result.Add(affectedItem);
				}

				return result;
			}
		}

		//[PartialPath("ActionValidators/ActionValidator")]
		internal abstract class ActionValidator
		{
			public string ActiveType { get; }
			public abstract Dictionary<string, List<string>> AllowedActionsMapForActiveType { get; }
			protected List<string> AllowedActionsMapForOtherTypes = new List<string> { "None" };
			private int _errorReportLength = 5;

			protected ActionValidator(string activeType)
			{
				ActiveType = activeType;
			}

			public void ValidateActions(IEnumerable<AffectedItem> affectedItems)
			{
				string errorReport = string.Empty;
				int errorsCount = 0;

				foreach (AffectedItem affectedItem in affectedItems)
				{
					string state = AllowedActionsMapForActiveType.ContainsKey(affectedItem.State) ? affectedItem.State : "Others";
					List<string> allowedActions = affectedItem.ItemType == ActiveType
						? AllowedActionsMapForActiveType[state]
						: AllowedActionsMapForOtherTypes;

					if (!allowedActions.Contains(affectedItem.Action))
					{
						errorsCount++;
						errorReport +=
							$"{affectedItem.ItemType} {affectedItem.Number} can have only these actions: {string.Join(", ", allowedActions)}. ";

						if (errorsCount == _errorReportLength)
						{
							break;
						}
					}
				}

				if (errorsCount > 0)
				{
					throw new ItemException(errorReport);
				}
			}
		}

		//[PartialPath("ActionValidators/PreReleaseActionValidator")]
		internal class PreReleaseActionValidator : ActionValidator
		{
			public override Dictionary<string, List<string>> AllowedActionsMapForActiveType =>
				new Dictionary<string, List<string>>
				{
					{"10", new List<string>{"None", "Release"}},
					{"30", new List<string>{"None", "Revise"}},
					{"Others", new List<string>{"None"}}
				};

			public PreReleaseActionValidator(string activeType) : base(activeType)
			{
			}
		}

		//[PartialPath("ActionValidators/ReleaseActionValidator")]
		internal class ReleaseActionValidator : ActionValidator
		{
			public override Dictionary<string, List<string>> AllowedActionsMapForActiveType =>
				new Dictionary<string, List<string>>
				{
					{"10", new List<string>{"None", "Release"}},
					{"30", new List<string>{"None", "Revise"}},
					{"50", new List<string>{"None", "Revise"}},
					{"Others", new List<string>{"None"}}
				};

			public ReleaseActionValidator(string activeType) : base(activeType)
			{
			}
		}

		//[PartialPath("DTO/AffectedItem")]
		internal struct AffectedItem
		{
			public string ItemType { get; set; }
			public string Number { get; set; }
			public string State { get; set; }
			public string Action { get; set; }]]></method_code>
  <method_type>C#</method_type>
  <name>GAG_ValidateAffectedItemsActions</name>
 </Item>
</AML>