<AML>
 <Item type="Method" id="44530E78960943B3917888FD1A12C97C" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[
			var dal = new DataAccessLayer(this.getInnovator(), CCO);
			BusinessLogic businessLogic = new BusinessLogic(dal);
			return businessLogic.Run(this);
}

		//[PartialPath("BusinessLogic/BusinessLogic")]
		internal class BusinessLogic
		{
			private const string FlagPropertyName = "gag_migration_edit_flag";

			private readonly IDataAccessLayer _dal;

			public BusinessLogic(IDataAccessLayer dataAccessLayer)
			{
				_dal = dataAccessLayer;
			}

			public Item Run(Item contextItem)
			{
				Item latestItem = GetLatestItem(contextItem);
				if (latestItem == null)
				{
					return contextItem;
				}

				string actualFlagValue = contextItem.getProperty(FlagPropertyName);
				string expectedFlagValue = latestItem.getProperty(FlagPropertyName);
				return string.Equals(actualFlagValue, expectedFlagValue, StringComparison.Ordinal)
					? contextItem
					: throw new ItemException($"The property {FlagPropertyName} cannot be changed");
			}

			private Item GetLatestItem(Item contextItem)
			{
				Item actualItem = _dal.NewItem(contextItem.getType(), "get");
				actualItem.setProperty("config_id", contextItem.getProperty("config_id"));
				actualItem.setAttribute("is_current", "1");
				actualItem.setAttribute("select", FlagPropertyName);
				actualItem = _dal.ApplyItem(actualItem);
				if (actualItem.isEmpty())
				{
					return null;
				}

				Contract.ThrowIfError(actualItem);
				return actualItem;
			}]]></method_code>
  <method_type>C#</method_type>
  <name>GAG_DisableEditingMigrationFlag</name>
 </Item>
</AML>