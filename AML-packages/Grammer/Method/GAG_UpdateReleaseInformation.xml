<AML>
 <Item type="Method" id="36DD8F71E1E44B42B6E147EE97F62561" action="add">
  <comments />
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[			IDataAccessLayer dataAccessLayer = new DataAccessLayer(this.getInnovator(), CCO);
			BusinessLogic businessLogic = new BusinessLogic(dataAccessLayer);
			return businessLogic.Run(this);
}

		//[PartialPath("BusinessLogic/BusinessLogic")]
		public class BusinessLogic
		{
			private readonly IDataAccessLayer _dal;

			public BusinessLogic(IDataAccessLayer dataAccessLayer)
			{
				_dal = dataAccessLayer;
			}

			public Item Run(Item contextItem)
			{
				_ = contextItem ?? throw new ArgumentNullException(nameof(contextItem));
				string activityId = contextItem.getProperty("activity_id");
				string informationActivityName = contextItem.getProperty("information_activity_name");

				Item workflowProcess = GetWorkflowProcessByActivity(activityId);
				IEnumerable<Item> activityAssignments = GetActivityAssignments(informationActivityName, workflowProcess.getID());
				Item lastActivityAssignment = GetLastActivityAssignment(activityAssignments);

				Item geco = GetGecoByActivityId(activityId);
				IEnumerable<string> partIds = GetAffectedItems(geco.getID())
					.Select(SelectWorkItemId)
					.Where(x => x != null)
					.ToArray();

				return UpdatePartReleaseInformation(partIds, lastActivityAssignment);
			}

			private string SelectWorkItemId(Item affectedItem)
			{
				string newItemId = affectedItem.getProperty("gag_new_item");
				return string.IsNullOrWhiteSpace(newItemId) ? affectedItem.getRelatedItemID() : newItemId;
			}

			private Item GetGecoByActivityId(string activityId)
			{
				Item gecoBase = _dal.NewItem("Activity", "GAG_GetGecoByActivity");
				gecoBase.setID(activityId);

				gecoBase = _dal.ApplyItem(gecoBase);

				Item geco = _dal.NewItem("GAG_EngineeringChangeObject", "get");
				geco.setID(gecoBase.getID());
				geco.setProperty("select", "classification,gag_sap_change_number");

				geco = _dal.ApplyItem(geco);
				ThrowIfEmpty(geco);
				Contract.ThrowIfError(geco);

				return geco;
			}

			private IEnumerable<Item> GetAffectedItems(string gecoId)
			{
				Item affectedItems = _dal.NewItem("GAG_GECO ChangeControlled", "get");
				affectedItems.setAttribute("select", "related_id, gag_new_item");
				affectedItems.setProperty("source_id", gecoId);
				affectedItems.setPropertyCondition("gag_action", "ne");
				affectedItems.setProperty("gag_action", "None");
				affectedItems = _dal.ApplyItem(affectedItems);
				if (affectedItems.isEmpty())
				{
					return Array.Empty<Item>();
				}

				Contract.ThrowIfError(affectedItems);
				return affectedItems.Enumerate();
			}

			private Item UpdatePartReleaseInformation(IEnumerable<string> partIds, Item activityAssignment)
			{
				if (!partIds.Any())
				{
					_dal.NewResult(string.Empty);
				}

				string currentUserId = activityAssignment.getProperty("closed_by");
				string releasedOn = activityAssignment.getProperty("closed_on");
				Item updateQuery = _dal.NewItem("Part", "edit");
				updateQuery.setAttribute("version", "0");
				updateQuery.setAttribute("idlist", string.Join(",", partIds));
				updateQuery.setProperty("gag_released_by", currentUserId);
				updateQuery.setProperty("gag_released_on", releasedOn);
				return _dal.ApplyItem(updateQuery);
			}

			private Item GetWorkflowProcessByActivity(string activityID)
			{
				Item itemWFP = _dal.NewItem("Workflow Process", "get");
				itemWFP.setAttribute("select", "id");

				Item itemWFPA = itemWFP.createRelationship("Workflow Process Activity", "get");

				Item itemActivity = itemWFPA.createRelatedItem("Activity", "get");
				itemActivity.setID(activityID);
				itemWFP = _dal.ApplyItem(itemWFP);
				ThrowIfEmpty(itemWFP);
				Contract.ThrowIfError(itemWFP);

				return itemWFP;
			}

			private IEnumerable<Item> GetActivityAssignments(string activityName, string workflowProcessId)
			{
				Item wfProcessActivity = _dal.NewItem("Workflow Process Activity", "get");
				wfProcessActivity.setProperty("source_id", workflowProcessId);
				Item relatedActivity = wfProcessActivity.createRelatedItem("Activity", "get");
				relatedActivity.setProperty("name", activityName);
				relatedActivity.setAttribute("select", "*");
				wfProcessActivity = _dal.ApplyItem(wfProcessActivity);
				ThrowIfEmpty(wfProcessActivity);
				Contract.ThrowIfError(wfProcessActivity);

				IEnumerable<Item> activities = wfProcessActivity.Enumerate().Select(x => x.getRelatedItem());
				string condtition = string.Join(",", activities.Select(x => $"'{x.getID()}'"));

				Item activityAssignments = _dal.NewItem("Activity Assignment", "get");
				activityAssignments.setAttribute("select", "closed_by, closed_on");
				activityAssignments.setPropertyCondition("source_id", "in");
				activityAssignments.setProperty("source_id", condtition);
				activityAssignments = _dal.ApplyItem(activityAssignments);
				ThrowIfEmpty(activityAssignments);
				Contract.ThrowIfError(activityAssignments);

				return activityAssignments.Enumerate();
			}

			private static Item GetLastActivityAssignment(IEnumerable<Item> activityAssignments)
			{
				return activityAssignments
					.Select(x => new
					{
						ClosedOn = DateTime.ParseExact(x.getProperty("closed_on"), "s", CultureInfo.InvariantCulture),
						Item = x
					})
					.OrderByDescending(x => x.ClosedOn)
					.Select(x => x.Item)
					.First();
			}

			private void ThrowIfEmpty(Item item)
			{
				if (item.isEmpty())
				{
					string error = item.getErrorString();
					throw new ItemException(_dal.NewError(error));
				}
			}]]></method_code>
  <method_type>C#</method_type>
  <name>GAG_UpdateReleaseInformation</name>
 </Item>
</AML>