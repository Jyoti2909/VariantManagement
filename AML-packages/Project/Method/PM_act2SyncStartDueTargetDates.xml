<AML>
 <Item type="Method" id="34604025AA1A4E8AA4D692240C08562C" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[var func = function chngDates_2D4C8C094DEC4f8e8770151195794C72() {
  var func_incDate = window.incDate;
  var func_decDate = window.decDate;
  var sourceProp = this.name;
  if (event.type === "change" && event.propertyDef  &&  window.handleItemChange){
    if(!top.aras.isPropertyValueValid(event.propertyDef, srcElement.value)){
      return;
    }
    window.handleItemChange(sourceProp,  srcElement.value, event.propertyDef.data_type , event.propertyDef.pattern);
  }

  var targetStartNm = "date_start_target";
  var targetFinishNm = "date_due_target";
  var planStartNm = "date_start_sched";
  var planFinishNm = "date_due_sched";
  var expdurNm = "expected_duration";
  var percentComplNm = "percent_compl";
  var workEstNm = "work_est";

  //fake global vars for incDate/decDate functionality
  var old_a = window.a;
  window.a = top.aras;

  var durationStr = top.aras.getItemProperty(document.item, expdurNm);
  if (sourceProp == expdurNm)
  {
    var ts = top.aras.getItemProperty(document.item, targetStartNm);
    var tf = top.aras.getItemProperty(document.item, targetFinishNm);
    var ps = top.aras.getItemProperty(document.item, planStartNm);
    var pf = top.aras.getItemProperty(document.item, planFinishNm);
    
    if (!ts && !tf && !ps && !pf) return;

    if (ts || tf)
    {
      if (ts)
        updatePropertyAndField(targetStartNm, targetFinishNm, func_incDate);
      else
        updatePropertyAndField(targetFinishNm, targetStartNm, func_decDate);
    }

    if (ps && pf)
    {
      if (ps)
        updatePropertyAndField(planStartNm, planFinishNm, func_incDate);
      else
        updatePropertyAndField(planFinishNm, planStartNm, func_decDate);
    }

    durationStr = this.value;
  }
  else if (sourceProp == targetStartNm)
  {
    // Update Target Finish
    updatePropertyAndField(sourceProp, targetFinishNm, func_incDate);
  }
  else if (sourceProp == targetFinishNm)
  {
    // Update Target Start
    updatePropertyAndField(sourceProp, targetStartNm, func_decDate);
  }
  else if (sourceProp == planStartNm)
  {
    // Update Plan Finish
    var ps = top.aras.getItemProperty(document.item, planStartNm);
    var pf = top.aras.getItemProperty(document.item, planFinishNm);
    if (ps && pf)
    updatePropertyAndField(sourceProp, planFinishNm, func_incDate);
  }
  else if (sourceProp == planFinishNm)
  {
    // Update expected duration and Target Finish date
    var ps = top.aras.getItemProperty(document.item, planStartNm);
    var pf = top.aras.getItemProperty(document.item, planFinishNm);
    if (ps && pf) {
      var isMilestone = top.aras.getItemProperty(document.item, 'is_milestone') == '1' ? true : false;
      if (isMilestone)
      {
        durationStr = 0;
        handleItemChange(expdurNm, durationStr); // Update expected_duration
        updatePropertyAndField(planFinishNm, planStartNm, func_incDate);
      }
      else
      {
        durationStr = diffDates(ps, pf);
        if (durationStr >= 0)
        {
          if (durationStr == 0)
            durationStr = 1;
          else
            durationStr += 1;

          handleItemChange(expdurNm, durationStr); // Update expected_duration
          updatePropertyAndField(targetStartNm, targetFinishNm, func_incDate); // Update Target Finish date
        }
        else
        {
          var tmpDuration = durationStr;
          durationStr = top.aras.getItemProperty(document.item, expdurNm);

          while (tmpDuration < 0)
          {
            var continueEdit = top.aras.confirm(top.aras.getResource("project", "pr_methods.cannot_change_to_negative_duration"));
            if (continueEdit)
            {
              srcElement.fireEvent("onclick");

              tmpDuration = diffDates(ps, top.aras.getItemProperty(document.item, planFinishNm));
              if (tmpDuration >= 0)
              durationStr = tmpDuration;
            }
            else
              tmpDuration = durationStr;
          }

          handleItemChange(expdurNm, durationStr); // Update expected_duration
          updatePropertyAndField(planStartNm, planFinishNm, func_incDate);
          return;
        }
      }
    }
  }

  function updatePropertyAndField(sourceProp, prop2update, functionToCall) {
    var sourcePropVal = top.aras.getItemProperty(document.item, sourceProp);

    var duration = parseInt(durationStr);
    if (duration >= 0)
    {
      var newValueInNeutral = "";
      var newValueConverted = "";
      if (sourcePropVal)
      {
        var datePattern = top.aras.getDotNetDatePattern(getDatePropertyPattern("Activity2", sourceProp));
        newValueInNeutral = functionToCall(sourcePropVal, duration > 0 ? duration - 1 : duration);
        newValueConverted = convertDateStr(newValueInNeutral, "", datePattern);
      }
      handleItemChange(prop2update, newValueConverted);
      top.aras.setItemProperty(document.item, prop2update, newValueInNeutral);
    }
  }
}.bind(this);

var expdurNm = "expected_duration";
var percentComplNm = "percent_compl";
var workEstNm = "work_est";

if(document.item)
{
  if (srcElement.name == expdurNm)
  {
    var isMilestone = top.aras.getItemProperty(document.item, 'is_milestone') == '1' ? true : false;
    var val = parseInt(srcElement.value);
    var isInteger = top.aras.isInteger(srcElement.value);
    if(isMilestone)
    {
      if (!isInteger || val != 0)
      {
        srcElement.value = '0';
        if(window.handleItemChange)
          handleItemChange(expdurNm, '0');
        return;
      }
    }
    else
    {
      if(isNaN(val) || val < 0 || !isInteger)
      {
        var continueEdit = false;
        var newDur = 0;
        if (val < 0 && isInteger)
          continueEdit = top.aras.confirm(top.aras.getResource("project", "pr_methods.must_int_edit_again"));
        
        if (!continueEdit)
        {
          //fake global vars for incDate/decDate functionality
          var old_a = window.a;
          window.a = top.aras;

          if (window.diffDates != undefined)
          {
            var ts = top.aras.getItemProperty(document.item, "date_start_target");
            var tf = top.aras.getItemProperty(document.item, "date_due_target");
            if (ts && tf)
              newDur = diffDates(ts, tf);
            else
            {
              var ps = top.aras.getItemProperty(document.item, "date_start_sched");
              var pf = top.aras.getItemProperty(document.item, "date_due_sched");
              if (ps && pf)
                newDur = diffDates(ps, pf);
            }
          }          
          else
            newDur = 0;

          //unfake global vars for incDate/decDate functionality
          window.a = old_a;

          if (newDur == 0)
            newDur = 1;
          else if (newDur > 0)
            newDur += 1;

          if(window.handleItemChange)
          {
            if (newDur < 0) newDur = 0;
            srcElement.value = newDur;
            handleItemChange(expdurNm, newDur);
          }
        }

        if (continueEdit)
        {
          srcElement.focus();
          top.aras.setItemProperty(document.item, expdurNm, newDur);
          return;
        }
      }//if(isNaN(val) || val < 0 || !isInteger)
    }
  }
  else if (srcElement.name == percentComplNm)
  {
    var val = parseInt(srcElement.value);
    if (!top.aras.isInteger(val) || (top.aras.isInteger(val) && (top.aras.isNegativeInteger(val) || val > 100)))
    {
      if (top.aras.confirm(top.aras.getResource("project", "pr_methods.must_int_between_0_and_100_edit_again")))
      {
        srcElement.focus();
        top.aras.setItemProperty(document.item,percentComplNm, '0');
      }
      else
      {
        srcElement.value = '0';
        if(window.handleItemChange)
          handleItemChange(percentComplNm, '0');
      }
      
      return;
    }
  }
  else if (srcElement.name == workEstNm)
  {
    var val = parseInt(srcElement.value);
    if (top.aras.isNegativeInteger(val) || val == 0)
    {
      if (top.aras.confirm("Value must be a positive integer. Edit again?"))
      {
        srcElement.focus();
        top.aras.setItemProperty(document.item, workEstNm, '');
      }
      else
      {
        srcElement.value = '';
        if(window.handleItemChange)
          handleItemChange(workEstNm, '');
      }

      return;
    }
  }
}

//fake global vars for incDate/decDate functionality
var old_a = window.a;
window.a = top.aras;

try {
  func();
} finally {
  //restore global vars faked for incDate/decDate functionality
  window.a = old_a;
}]]></method_code>
  <method_type>JavaScript</method_type>
  <name>PM_act2SyncStartDueTargetDates</name>
 </Item>
</AML>