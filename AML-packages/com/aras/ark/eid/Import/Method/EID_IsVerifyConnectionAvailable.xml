<AML>
 <Item type="Method" id="648B095BD6B1437E86E3E08992C114AE" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[

var TestConnectionAvilabilityVerifier = (function () {
	return {
	   verifyAvilability:
	   function fVerifyAvilability(currElem){
		   if (!document.isEditMode){
				return false;
			}
			const button = getTestConnectionButton();
			if (!button){
				return false;
			}
			if (button.disabled === false &&
				typeof(currElem.value) === "string" && currElem.value.trim().length === 0){
				button.disabled = true;
				return true;
			}
			if (button.disabled === true &&
				typeof(currElem.value) === "string" && currElem.value.trim().length > 0){
				if (isEnablingAllowedByOthers(currElem.name)){
					button.disabled = false;
				}
			}
		   return true;
	   }
	};

	function getTestConnectionButton(){
		const selector = "input[type='button'][name='EID_TestConnectionBtn']";
		const foundButtons = document.querySelectorAll(selector);
		if (foundButtons.length === 1){
			return foundButtons[0];
		} else {
			return undefined;
		}
	}

	function isEnablingAllowedByOthers(currElemName){
		let othersAllow = true;
		const propsToCheck = ["eid_connection_string", "eid_user_name", "eid_password_key"];
		let otherPrN, otherPropName, selector, foundInputs, inputBeingChecked;
		const propsToCheckAdjusted = propsToCheck.filter(
			function fFilter(arg){
				return arg !== currElemName;
			}
		);
		for (otherPrN = 0; otherPrN < propsToCheckAdjusted.length; otherPrN++){
			otherPropName = propsToCheckAdjusted[otherPrN];
			selector = "input[type='text'][name='" + otherPropName + "']";
			foundInputs = document.querySelectorAll(selector);
			if (!foundInputs || foundInputs.length !== 1){
				continue;
			}
			inputBeingChecked = foundInputs[0];
			if ((typeof(inputBeingChecked.value) === "string" && inputBeingChecked.value.trim().length === 0)
				|| typeof(inputBeingChecked.value) !== "string"){
				othersAllow = false;
				break;
			}
		}
		return othersAllow;
	}
}());

TestConnectionAvilabilityVerifier.verifyAvilability(this);

]]></method_code>
  <method_type>JavaScript</method_type>
  <name>EID_IsVerifyConnectionAvailable</name>
 </Item>
</AML>