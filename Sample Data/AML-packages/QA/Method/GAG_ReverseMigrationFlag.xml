<AML>
 <Item type="Method" id="1E842FB2B24F425EAD7C040B352CE845" action="add">
  <comments />
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[            IDataAccessLayer dataAccessLayer = new DataAccessLayer(this.getInnovator(), CCO);
			BusinessLogic businessLogic = new BusinessLogic(dataAccessLayer);
			return businessLogic.Run(this);
}

		//[PartialPath("BusinessLogic/BusinessLogic")]
		internal class BusinessLogic
		{
			private const string SQLTemplate = "UPDATE [innovator].[{0}] SET GAG_MIGRATION_EDIT_FLAG = {1} WHERE ID = '{2}'";

			private readonly IDataAccessLayer _dal;

			public BusinessLogic(IDataAccessLayer dataAccessLayer)
			{
				_dal = dataAccessLayer;
			}

			public Item Run(Item contextItem)
			{
				string id = contextItem.getID();
				string tableName = _dal.GenerateTableName(contextItem.getType());
				string value = contextItem.getProperty("gag_migration_edit_flag");
				value = value == "0" ? "1" : "0";
				string updateSql = string.Format(SQLTemplate, tableName, value, id);
				Item result = _dal.ApplySql(updateSql);
				Contract.ThrowIfError(result);
				return contextItem;
			}
		}

		//[PartialPath("DAL/DataAccessLayer")]
		internal class DataAccessLayer : Aras.Common.DataAccessLayer, IDataAccessLayer
		{
			public DataAccessLayer(Innovator innovator, Aras.Server.Core.CallContext cco) : base(innovator, cco) { }

			public string GenerateTableName(string itemTypeName)
			{
				return CallContext.DB.GenerateTableName(itemTypeName);
			}
		}

		//[PartialPath("DAL/IDataAccessLayer")]
		internal interface IDataAccessLayer : Aras.Common.IDataAccessLayer
		{
			string GenerateTableName(string itemTypeName);]]></method_code>
  <method_type>C#</method_type>
  <name>GAG_ReverseMigrationFlag</name>
 </Item>
</AML>